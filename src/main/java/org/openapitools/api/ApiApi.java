/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AnnadataCustomer;
import org.openapitools.model.AnnadataUser;
import org.openapitools.model.AssignRequest;
import org.openapitools.model.AssignTestView;
import org.openapitools.model.BigEcomCart;
import org.openapitools.model.BigEcomCategory;
import org.openapitools.model.BigEcomCustomer;
import org.openapitools.model.BigEcomProduct;
import org.openapitools.model.BigEcomSale;
import org.openapitools.model.BigUserLogin;
import org.openapitools.model.Booking;
import org.openapitools.model.CityMaster;
import org.openapitools.model.CityMasterData;
import org.openapitools.model.CountryMaster;
import org.openapitools.model.CreateGoalView;
import org.openapitools.model.DashModel;
import org.openapitools.model.DashModelToday;
import org.openapitools.model.DataGraph;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.DistrictMaster;
import org.openapitools.model.DistrictMasterData;
import org.openapitools.model.EcomCart;
import org.openapitools.model.EcomCategory;
import org.openapitools.model.EcomCustomer;
import org.openapitools.model.EcomProduct;
import org.openapitools.model.EcomSale;
import org.openapitools.model.EnquirySearch;
import org.openapitools.model.EnquiryView;
import org.openapitools.model.ErmClient;
import org.openapitools.model.ErmClientProject;
import org.openapitools.model.ErmEmployeeView;
import org.openapitools.model.ErpProjectChange;
import org.openapitools.model.ErpProjectMeeting;
import org.openapitools.model.ErpProjectPayment;
import org.openapitools.model.EventBookingViewModel;
import org.openapitools.model.EventFilter;
import org.openapitools.model.EventLoginUser;
import org.openapitools.model.EventMaster;
import org.openapitools.model.EventUser;
import org.openapitools.model.Executive;
import org.openapitools.model.FarmerFilter;
import org.openapitools.model.FarmerMasterView;
import org.openapitools.model.FarmerVerificationModel;
import org.openapitools.model.FilterhotelBooking;
import org.openapitools.model.FoodCategoryMaster;
import org.openapitools.model.FoodItemList;
import org.openapitools.model.FoodItemMaster;
import org.openapitools.model.FoodItemType;
import org.openapitools.model.FoodItemView;
import org.openapitools.model.FoodOrder;
import org.openapitools.model.FoodOrderOpen;
import org.openapitools.model.FoodOrderView;
import org.openapitools.model.GoalCategory;
import org.openapitools.model.GoalLogin;
import org.openapitools.model.GoalUser;
import org.openapitools.model.HospitalAppointmentView;
import org.openapitools.model.HospitalPatient;
import org.openapitools.model.HotelCustomer;
import org.openapitools.model.HotelRoomMaster;
import org.openapitools.model.HotelUser;
import org.openapitools.model.InLanguage;
import org.openapitools.model.InLanguageTopic;
import org.openapitools.model.InQuestion;
import org.openapitools.model.JiraIssue;
import org.openapitools.model.JiraProject;
import org.openapitools.model.JiraUser;
import org.openapitools.model.JobApplication;
import org.openapitools.model.JobCategory;
import org.openapitools.model.JobEmployer;
import org.openapitools.model.JobListing;
import org.openapitools.model.JobSeekerViewModel;
import org.openapitools.model.JobUserView;
import org.openapitools.model.LoginModel;
import org.openapitools.model.LoginZomato;
import org.openapitools.model.ModelApiResponse;
import org.openapitools.model.NewTicket;
import org.openapitools.model.NewhotelBooking;
import org.openapitools.model.Offer;
import org.openapitools.model.OfferView;
import java.time.OffsetDateTime;
import org.openapitools.model.QuizAssignedtest;
import org.openapitools.model.QuizAssignedtestViewModel;
import org.openapitools.model.QuizCategory;
import org.openapitools.model.QuizQuestionsViewModel;
import org.openapitools.model.QuizTestViewModel;
import org.openapitools.model.QuizUser;
import org.openapitools.model.QuotationBid;
import org.openapitools.model.QuotationBidFilter;
import org.openapitools.model.QuotationFilter;
import org.openapitools.model.QuotationMaster;
import org.openapitools.model.QuotationMasterView;
import org.openapitools.model.ReLogin;
import org.openapitools.model.ReqDepartment;
import org.openapitools.model.ReqEmployee;
import org.openapitools.model.ReqLeaf;
import org.openapitools.model.RequestFilter;
import org.openapitools.model.RoomAllotmentList;
import org.openapitools.model.RoomListViewModel;
import org.openapitools.model.RoomTypeMaster;
import org.openapitools.model.RoomTypeViewModel;
import org.openapitools.model.RoomViewModel;
import org.openapitools.model.Service;
import org.openapitools.model.ServicesView;
import org.openapitools.model.StateMaster;
import org.openapitools.model.StateMasterDATA;
import org.openapitools.model.StatusMasterView;
import org.openapitools.model.StatusMasterViewModel;
import org.openapitools.model.StockProduct;
import org.openapitools.model.StockPurchase;
import org.openapitools.model.StockSale;
import org.openapitools.model.TalukaMaster;
import org.openapitools.model.TempBooking;
import org.openapitools.model.TestLogin;
import org.openapitools.model.TrainAppBookingView;
import org.openapitools.model.TrainAppPassenger;
import org.openapitools.model.TrainAppStation;
import org.openapitools.model.TrainAppTrain;
import org.openapitools.model.TrainLogin;
import org.openapitools.model.UserLogin;
import org.openapitools.model.UserMaster;
import org.openapitools.model.UserMasterView;
import org.openapitools.model.UserModel;
import org.openapitools.model.VendorFilter;
import org.openapitools.model.VendorMaster;
import org.openapitools.model.VendorVerificationModel;
import org.openapitools.model.ViewGoalView;
import org.openapitools.model.VisitSearch;
import org.openapitools.model.WaterCustomer;
import org.openapitools.model.WaterCustomerObj;
import org.openapitools.model.WaterCustomerView;
import org.openapitools.model.WebinarRegistration;
import org.openapitools.model.WebinarRegistrationProd;
import org.openapitools.model.WeddingAllotment;
import org.openapitools.model.WeddingBookingList;
import org.openapitools.model.WeddingFoodItemList;
import org.openapitools.model.WeddingFoodItems;
import org.openapitools.model.WeddingMasterList;
import org.openapitools.model.WeddingMasterView;
import org.openapitools.model.WeddingPackage;
import org.openapitools.model.WeddingPackageMasterList;
import org.openapitools.model.WeddingService;
import org.openapitools.model.WeddingServiceView;
import org.openapitools.model.YouTubeUserBasicView;
import org.openapitools.model.YoutubeTicket;
import org.openapitools.model.ZomatoCartView;
import org.openapitools.model.ZomatoFoodCategory;
import org.openapitools.model.ZomatoMenuItem;
import org.openapitools.model.ZomatoOrderViewModel;
import org.openapitools.model.ZomatoRestaurant;
import org.openapitools.model.ZomatoUser;
import org.openapitools.model.ZoomBooking;
import org.openapitools.model.ZoomCarReview;
import org.openapitools.model.ZoomCarView;
import org.openapitools.model.ZoomLocation;
import org.openapitools.model.ZoomUser;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-25T23:04:59.126991100-05:00[America/Toronto]")
@Validated
@Tag(name = "Ecomm", description = "the Ecomm API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/amazon/AddToCart
     *
     * @param ecomCart  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonAddToCartPost",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/amazon/AddToCart",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonAddToCartPost(
        @Parameter(name = "EcomCart", description = "") @Valid @RequestBody(required = false) EcomCart ecomCart
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/amazon/CreateNewCategory
     *
     * @param ecomCategory  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonCreateNewCategoryPost",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/amazon/CreateNewCategory",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonCreateNewCategoryPost(
        @Parameter(name = "EcomCategory", description = "") @Valid @RequestBody(required = false) EcomCategory ecomCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/amazon/CreateProduct
     *
     * @param ecomProduct  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonCreateProductPost",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/amazon/CreateProduct",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonCreateProductPost(
        @Parameter(name = "EcomProduct", description = "") @Valid @RequestBody(required = false) EcomProduct ecomProduct
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/DeleteProductById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonDeleteProductByIdGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/DeleteProductById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonDeleteProductByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/DeleteProductFromCartById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonDeleteProductFromCartByIdGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/DeleteProductFromCartById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonDeleteProductFromCartByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetAllCartItems
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetAllCartItemsGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetAllCartItems",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetAllCartItemsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetAllCategory
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetAllCategoryGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetAllCategory",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetAllCategoryGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetAllCustomer
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetAllCustomerGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetAllCustomer",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetAllCustomerGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetAllProductsByCategoryId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetAllProductsByCategoryIdGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetAllProductsByCategoryId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetAllProductsByCategoryIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetAllProducts
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetAllProductsGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetAllProducts",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetAllProductsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetAllSaleByCustomerId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetAllSaleByCustomerIdGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetAllSaleByCustomerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetAllSaleByCustomerIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetAllSaleItems
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetAllSaleItemsGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetAllSaleItems",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetAllSaleItemsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetCartProductsByCustomerId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetCartProductsByCustomerIdGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetCartProductsByCustomerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetCartProductsByCustomerIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/amazon/GetProductById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonGetProductByIdGet",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/amazon/GetProductById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonGetProductByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/amazon/Login
     *
     * @param userLogin  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonLoginPost",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/amazon/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonLoginPost(
        @Parameter(name = "UserLogin", description = "") @Valid @RequestBody(required = false) UserLogin userLogin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/amazon/PlaceOrder
     *
     * @param ecomSale  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonPlaceOrderPost",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/amazon/PlaceOrder",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonPlaceOrderPost(
        @Parameter(name = "EcomSale", description = "") @Valid @RequestBody(required = false) EcomSale ecomSale
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/amazon/RegisterCustomer
     *
     * @param ecomCustomer  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonRegisterCustomerPost",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/amazon/RegisterCustomer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonRegisterCustomerPost(
        @Parameter(name = "EcomCustomer", description = "") @Valid @RequestBody(required = false) EcomCustomer ecomCustomer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/amazon/UpdateProduct
     *
     * @param ecomProduct  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAmazonUpdateProductPost",
        tags = { "Ecomm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/amazon/UpdateProduct",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAmazonUpdateProductPost(
        @Parameter(name = "EcomProduct", description = "") @Valid @RequestBody(required = false) EcomProduct ecomProduct
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddBid
     *
     * @param quotationBid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddBidPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddBid",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddBidPost(
        @Parameter(name = "QuotationBid", description = "") @Valid @RequestBody(required = false) QuotationBid quotationBid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddBulkCity
     *
     * @param cityMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddBulkCityPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddBulkCity",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddBulkCityPost(
        @Parameter(name = "CityMaster", description = "") @Valid @RequestBody(required = false) List<@Valid CityMaster> cityMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddBulkDistrict
     *
     * @param districtMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddBulkDistrictPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddBulkDistrict",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddBulkDistrictPost(
        @Parameter(name = "DistrictMaster", description = "") @Valid @RequestBody(required = false) List<@Valid DistrictMaster> districtMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddBulkFoodCategory
     *
     * @param foodCategoryMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddBulkFoodCategoryPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddBulkFoodCategory",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddBulkFoodCategoryPost(
        @Parameter(name = "FoodCategoryMaster", description = "") @Valid @RequestBody(required = false) List<@Valid FoodCategoryMaster> foodCategoryMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddBulkState
     *
     * @param stateMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddBulkStatePost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddBulkState",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddBulkStatePost(
        @Parameter(name = "StateMaster", description = "") @Valid @RequestBody(required = false) List<@Valid StateMaster> stateMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddFoodItem
     *
     * @param foodItemMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddFoodItemPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddFoodItem",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddFoodItemPost(
        @Parameter(name = "FoodItemMaster", description = "") @Valid @RequestBody(required = false) FoodItemMaster foodItemMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddNewFarmer
     *
     * @param farmerMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddNewFarmerPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddNewFarmer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddNewFarmerPost(
        @Parameter(name = "FarmerMasterView", description = "") @Valid @RequestBody(required = false) FarmerMasterView farmerMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddNewVendor
     *
     * @param vendorMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddNewVendorPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddNewVendor",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddNewVendorPost(
        @Parameter(name = "VendorMaster", description = "") @Valid @RequestBody(required = false) VendorMaster vendorMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddTaluka
     *
     * @param talukaMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddTalukaPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddTaluka",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddTalukaPost(
        @Parameter(name = "TalukaMaster", description = "") @Valid @RequestBody(required = false) TalukaMaster talukaMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddUpdateCustomer
     *
     * @param annadataCustomer  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddUpdateCustomerPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddUpdateCustomer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddUpdateCustomerPost(
        @Parameter(name = "AnnadataCustomer", description = "") @Valid @RequestBody(required = false) AnnadataCustomer annadataCustomer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddUpdateExecutive
     *
     * @param executive  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddUpdateExecutivePost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddUpdateExecutive",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddUpdateExecutivePost(
        @Parameter(name = "Executive", description = "") @Valid @RequestBody(required = false) Executive executive
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/AddUpdateUser
     *
     * @param annadataUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataAddUpdateUserPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/AddUpdateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataAddUpdateUserPost(
        @Parameter(name = "AnnadataUser", description = "") @Valid @RequestBody(required = false) AnnadataUser annadataUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/CreateNewRfq
     *
     * @param quotationMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataCreateNewRfqPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/CreateNewRfq",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataCreateNewRfqPost(
        @Parameter(name = "QuotationMasterView", description = "") @Valid @RequestBody(required = false) QuotationMasterView quotationMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteBidByBidId
     *
     * @param bidId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteBidByBidIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteBidByBidId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteBidByBidIdDelete(
        @Parameter(name = "bidId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bidId", required = false) Integer bidId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteCustomerByCustomerId
     *
     * @param customerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteCustomerByCustomerIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteCustomerByCustomerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteCustomerByCustomerIdDelete(
        @Parameter(name = "customerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "customerId", required = false) Integer customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteExecutiveByExecutiveId
     *
     * @param executiveId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteExecutiveByExecutiveIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteExecutiveByExecutiveId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteExecutiveByExecutiveIdDelete(
        @Parameter(name = "executiveId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executiveId", required = false) Integer executiveId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteFarmerByFarmerId
     *
     * @param farmerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteFarmerByFarmerIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteFarmerByFarmerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteFarmerByFarmerIdDelete(
        @Parameter(name = "farmerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "farmerId", required = false) Integer farmerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteFoodCategoryByCategoryId
     *
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteFoodCategoryByCategoryIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteFoodCategoryByCategoryId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteFoodCategoryByCategoryIdDelete(
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteFoodItmeByItemId
     *
     * @param itemId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteFoodItmeByItemIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteFoodItmeByItemId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteFoodItmeByItemIdDelete(
        @Parameter(name = "itemId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "itemId", required = false) Integer itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteRfqByRFQId
     *
     * @param quotationId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteRfqByRFQIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteRfqByRFQId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteRfqByRFQIdDelete(
        @Parameter(name = "quotationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "quotationId", required = false) Integer quotationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteUserByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteUserByUserIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteUserByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteUserByUserIdDelete(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Annadata/DeleteVendorByVendorId
     *
     * @param vendorId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataDeleteVendorByVendorIdDelete",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Annadata/DeleteVendorByVendorId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataDeleteVendorByVendorIdDelete(
        @Parameter(name = "vendorId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vendorId", required = false) Integer vendorId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/FilterQuotationBids
     *
     * @param quotationBidFilter  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataFilterQuotationBidsPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/FilterQuotationBids",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataFilterQuotationBidsPost(
        @Parameter(name = "QuotationBidFilter", description = "") @Valid @RequestBody(required = false) QuotationBidFilter quotationBidFilter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/FilterQuotation
     *
     * @param quotationFilter  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataFilterQuotationPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/FilterQuotation",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataFilterQuotationPost(
        @Parameter(name = "QuotationFilter", description = "") @Valid @RequestBody(required = false) QuotationFilter quotationFilter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAdminDasboardData
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAdminDasboardDataGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAdminDasboardData",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAdminDasboardDataGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllBidsByQuotationId
     *
     * @param quotationId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllBidsByQuotationIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllBidsByQuotationId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllBidsByQuotationIdGet(
        @Parameter(name = "quotationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "quotationId", required = false) Integer quotationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllCitiesByDistrictId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllCitiesByDistrictIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllCitiesByDistrictId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllCitiesByDistrictIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllCities
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllCitiesGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllCities",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllCitiesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllCustomerUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllCustomerUsersGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllCustomerUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllCustomerUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllCustomers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllCustomersGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllCustomers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllCustomersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllDistrictByStateId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllDistrictByStateIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllDistrictByStateId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllDistrictByStateIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllDistrict
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllDistrictGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllDistrict",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllDistrictGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllExecutive
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllExecutiveGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllExecutive",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllExecutiveGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllFarmerUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllFarmerUsersGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllFarmerUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllFarmerUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllFarmers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllFarmersGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllFarmers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllFarmersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllFoodCategory
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllFoodCategoryGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllFoodCategory",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllFoodCategoryGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllFoodItems
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllFoodItemsGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllFoodItems",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllFoodItemsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllFoodItemsbyCatId
     *
     * @param catid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllFoodItemsbyCatIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllFoodItemsbyCatId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllFoodItemsbyCatIdGet(
        @Parameter(name = "catid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "catid", required = false) Integer catid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllQuotationBidsByFarmerId
     *
     * @param farmerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllQuotationBidsByFarmerIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllQuotationBidsByFarmerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllQuotationBidsByFarmerIdGet(
        @Parameter(name = "farmerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "farmerId", required = false) Integer farmerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllQuotationBidsByVendorId
     *
     * @param vendorId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllQuotationBidsByVendorIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllQuotationBidsByVendorId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllQuotationBidsByVendorIdGet(
        @Parameter(name = "vendorId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vendorId", required = false) Integer vendorId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllQuotationBids
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllQuotationBidsGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllQuotationBids",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllQuotationBidsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllQuotationByFarmerId
     *
     * @param farmerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllQuotationByFarmerIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllQuotationByFarmerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllQuotationByFarmerIdGet(
        @Parameter(name = "farmerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "farmerId", required = false) Integer farmerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllQuotation
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllQuotationGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllQuotation",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllQuotationGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllState
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllStateGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllState",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllStateGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllTalukaByCityId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllTalukaByCityIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllTalukaByCityId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllTalukaByCityIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllTaluka
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllTalukaGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllTaluka",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllTalukaGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetAllVendorUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetAllVendorUsersGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetAllVendorUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetAllVendorUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetBidsForQuotationById
     *
     * @param quotationId  (optional)
     * @param vendorID  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetBidsForQuotationByIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetBidsForQuotationById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetBidsForQuotationByIdGet(
        @Parameter(name = "quotationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "quotationId", required = false) Integer quotationId,
        @Parameter(name = "vendorID", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vendorID", required = false) Integer vendorID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetCustomerById
     *
     * @param customerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetCustomerByIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetCustomerById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetCustomerByIdGet(
        @Parameter(name = "customerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "customerId", required = false) Integer customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetDownlineExecutiveByExecutiveId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetDownlineExecutiveByExecutiveIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetDownlineExecutiveByExecutiveId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetDownlineExecutiveByExecutiveIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetFarmerById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetFarmerByIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetFarmerById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetFarmerByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetFarmerDasboardById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetFarmerDasboardByIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetFarmerDasboardById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetFarmerDasboardByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/GetFarmersByFilter
     *
     * @param farmerFilter  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetFarmersByFilterPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/GetFarmersByFilter",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetFarmersByFilterPost(
        @Parameter(name = "FarmerFilter", description = "") @Valid @RequestBody(required = false) FarmerFilter farmerFilter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetFoodItemById
     *
     * @param itemId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetFoodItemByIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetFoodItemById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetFoodItemByIdGet(
        @Parameter(name = "itemId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "itemId", required = false) Integer itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/getRfqByQuotationId
     *
     * @param quotationId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetRfqByQuotationIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/getRfqByQuotationId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetRfqByQuotationIdGet(
        @Parameter(name = "quotationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "quotationId", required = false) Integer quotationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetVendorById
     *
     * @param vendorId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetVendorByIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetVendorById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetVendorByIdGet(
        @Parameter(name = "vendorId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vendorId", required = false) Integer vendorId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Annadata/GetVendorDasboardById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetVendorDasboardByIdGet",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Annadata/GetVendorDasboardById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetVendorDasboardByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/GetVendorsByFilter
     *
     * @param vendorFilter  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataGetVendorsByFilterPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/GetVendorsByFilter",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataGetVendorsByFilterPost(
        @Parameter(name = "VendorFilter", description = "") @Valid @RequestBody(required = false) VendorFilter vendorFilter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/login
     *
     * @param loginModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataLoginPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataLoginPost(
        @Parameter(name = "LoginModel", description = "") @Valid @RequestBody(required = false) LoginModel loginModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Annadata/UpdateBid
     *
     * @param quotationBid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataUpdateBidPut",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Annadata/UpdateBid",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataUpdateBidPut(
        @Parameter(name = "QuotationBid", description = "") @Valid @RequestBody(required = false) QuotationBid quotationBid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Annadata/UpdateFarmerDetails
     *
     * @param farmerMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataUpdateFarmerDetailsPut",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Annadata/UpdateFarmerDetails",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataUpdateFarmerDetailsPut(
        @Parameter(name = "FarmerMasterView", description = "") @Valid @RequestBody(required = false) FarmerMasterView farmerMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Annadata/UpdateFoodItem
     *
     * @param foodItemMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataUpdateFoodItemPut",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Annadata/UpdateFoodItem",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataUpdateFoodItemPut(
        @Parameter(name = "FoodItemMaster", description = "") @Valid @RequestBody(required = false) FoodItemMaster foodItemMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Annadata/UpdateRfq
     *
     * @param quotationMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataUpdateRfqPut",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Annadata/UpdateRfq",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataUpdateRfqPut(
        @Parameter(name = "QuotationMaster", description = "") @Valid @RequestBody(required = false) QuotationMaster quotationMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Annadata/UpdateVendor
     *
     * @param vendorMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataUpdateVendorPut",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Annadata/UpdateVendor",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataUpdateVendorPut(
        @Parameter(name = "VendorMaster", description = "") @Valid @RequestBody(required = false) VendorMaster vendorMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/VerifyFarmer
     *
     * @param farmerVerificationModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataVerifyFarmerPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/VerifyFarmer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataVerifyFarmerPost(
        @Parameter(name = "FarmerVerificationModel", description = "") @Valid @RequestBody(required = false) FarmerVerificationModel farmerVerificationModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Annadata/VerifyVendor
     *
     * @param vendorVerificationModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiAnnadataVerifyVendorPost",
        tags = { "Annadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Annadata/VerifyVendor",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiAnnadataVerifyVendorPost(
        @Parameter(name = "VendorVerificationModel", description = "") @Valid @RequestBody(required = false) VendorVerificationModel vendorVerificationModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/BigBasket/AddToCart
     *
     * @param bigEcomCart  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketAddToCartPost",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/BigBasket/AddToCart",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketAddToCartPost(
        @Parameter(name = "BigEcomCart", description = "") @Valid @RequestBody(required = false) BigEcomCart bigEcomCart
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/BigBasket/CreateNewCategory
     *
     * @param bigEcomCategory  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketCreateNewCategoryPost",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/BigBasket/CreateNewCategory",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketCreateNewCategoryPost(
        @Parameter(name = "BigEcomCategory", description = "") @Valid @RequestBody(required = false) BigEcomCategory bigEcomCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/BigBasket/CreateProduct
     *
     * @param bigEcomProduct  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketCreateProductPost",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/BigBasket/CreateProduct",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketCreateProductPost(
        @Parameter(name = "BigEcomProduct", description = "") @Valid @RequestBody(required = false) BigEcomProduct bigEcomProduct
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/DeleteProductById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketDeleteProductByIdGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/DeleteProductById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketDeleteProductByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/DeleteProductFromCartById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketDeleteProductFromCartByIdGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/DeleteProductFromCartById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketDeleteProductFromCartByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetAllCartItems
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetAllCartItemsGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetAllCartItems",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetAllCartItemsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetAllCategory
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetAllCategoryGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetAllCategory",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetAllCategoryGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetAllCustomer
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetAllCustomerGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetAllCustomer",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetAllCustomerGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetAllProductsByCategoryId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetAllProductsByCategoryIdGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetAllProductsByCategoryId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetAllProductsByCategoryIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetAllProducts
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetAllProductsGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetAllProducts",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetAllProductsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetAllSaleByCustomerId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetAllSaleByCustomerIdGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetAllSaleByCustomerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetAllSaleByCustomerIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetAllSaleItems
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetAllSaleItemsGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetAllSaleItems",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetAllSaleItemsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetCartProductsByCustomerId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetCartProductsByCustomerIdGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetCartProductsByCustomerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetCartProductsByCustomerIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/BigBasket/GetProductById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketGetProductByIdGet",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/BigBasket/GetProductById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketGetProductByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/BigBasket/Login
     *
     * @param bigUserLogin  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketLoginPost",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/BigBasket/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketLoginPost(
        @Parameter(name = "BigUserLogin", description = "") @Valid @RequestBody(required = false) BigUserLogin bigUserLogin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/BigBasket/PlaceOrder
     *
     * @param bigEcomSale  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketPlaceOrderPost",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/BigBasket/PlaceOrder",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketPlaceOrderPost(
        @Parameter(name = "BigEcomSale", description = "") @Valid @RequestBody(required = false) BigEcomSale bigEcomSale
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/BigBasket/RegisterCustomer
     *
     * @param bigEcomCustomer  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketRegisterCustomerPost",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/BigBasket/RegisterCustomer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketRegisterCustomerPost(
        @Parameter(name = "BigEcomCustomer", description = "") @Valid @RequestBody(required = false) BigEcomCustomer bigEcomCustomer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/BigBasket/UpdateProduct
     *
     * @param bigEcomProduct  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiBigBasketUpdateProductPost",
        tags = { "BigBasket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/BigBasket/UpdateProduct",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiBigBasketUpdateProductPost(
        @Parameter(name = "BigEcomProduct", description = "") @Valid @RequestBody(required = false) BigEcomProduct bigEcomProduct
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ClientStrive/AddUpdateClient
     *
     * @param ermClient  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveAddUpdateClientPost",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ClientStrive/AddUpdateClient",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveAddUpdateClientPost(
        @Parameter(name = "ErmClient", description = "") @Valid @RequestBody(required = false) ErmClient ermClient
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ClientStrive/AddUpdateClientProject
     *
     * @param ermClientProject  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveAddUpdateClientProjectPost",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ClientStrive/AddUpdateClientProject",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveAddUpdateClientProjectPost(
        @Parameter(name = "ErmClientProject", description = "") @Valid @RequestBody(required = false) ErmClientProject ermClientProject
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ClientStrive/AddUpdatePayment
     *
     * @param erpProjectPayment  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveAddUpdatePaymentPost",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ClientStrive/AddUpdatePayment",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveAddUpdatePaymentPost(
        @Parameter(name = "ErpProjectPayment", description = "") @Valid @RequestBody(required = false) ErpProjectPayment erpProjectPayment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ClientStrive/AddUpdateProjectChange
     *
     * @param erpProjectChange  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveAddUpdateProjectChangePost",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ClientStrive/AddUpdateProjectChange",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveAddUpdateProjectChangePost(
        @Parameter(name = "ErpProjectChange", description = "") @Valid @RequestBody(required = false) ErpProjectChange erpProjectChange
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ClientStrive/AddUpdateProjectMeeting
     *
     * @param erpProjectMeeting  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveAddUpdateProjectMeetingPost",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ClientStrive/AddUpdateProjectMeeting",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveAddUpdateProjectMeetingPost(
        @Parameter(name = "ErpProjectMeeting", description = "") @Valid @RequestBody(required = false) ErpProjectMeeting erpProjectMeeting
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ClientStrive/CreateNewEmployee
     *
     * @param ermEmployeeView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveCreateNewEmployeePost",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ClientStrive/CreateNewEmployee",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveCreateNewEmployeePost(
        @Parameter(name = "ErmEmployeeView", description = "") @Valid @RequestBody(required = false) ErmEmployeeView ermEmployeeView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/ClientStrive/DeleteChangeByChangeId
     *
     * @param changeId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveDeleteChangeByChangeIdDelete",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/ClientStrive/DeleteChangeByChangeId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveDeleteChangeByChangeIdDelete(
        @Parameter(name = "changeId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "changeId", required = false) Integer changeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/ClientStrive/DeleteClientByClientId
     *
     * @param clientId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveDeleteClientByClientIdDelete",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/ClientStrive/DeleteClientByClientId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveDeleteClientByClientIdDelete(
        @Parameter(name = "clientId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientId", required = false) Integer clientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/ClientStrive/DeleteMeetingByMeetingId
     *
     * @param meetingId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveDeleteMeetingByMeetingIdDelete",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/ClientStrive/DeleteMeetingByMeetingId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveDeleteMeetingByMeetingIdDelete(
        @Parameter(name = "meetingId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "meetingId", required = false) Integer meetingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/ClientStrive/DeletePaymentByPaymentId
     *
     * @param paymentId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveDeletePaymentByPaymentIdDelete",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/ClientStrive/DeletePaymentByPaymentId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveDeletePaymentByPaymentIdDelete(
        @Parameter(name = "paymentId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "paymentId", required = false) Integer paymentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/ClientStrive/DeleteProjectByProjectId
     *
     * @param projectId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveDeleteProjectByProjectIdDelete",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/ClientStrive/DeleteProjectByProjectId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveDeleteProjectByProjectIdDelete(
        @Parameter(name = "projectId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Integer projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/ClientStrive/DeleteRoomByRoomId
     *
     * @param empId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveDeleteRoomByRoomIdDelete",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/ClientStrive/DeleteRoomByRoomId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveDeleteRoomByRoomIdDelete(
        @Parameter(name = "empId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "empId", required = false) Integer empId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllClientProjects
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllClientProjectsGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllClientProjects",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllClientProjectsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllClients
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllClientsGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllClients",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllClientsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllEmployee
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllEmployeeGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllEmployee",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllEmployeeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllMeetingsByProjectId
     *
     * @param projectId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllMeetingsByProjectIdGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllMeetingsByProjectId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllMeetingsByProjectIdGet(
        @Parameter(name = "projectId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Integer projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllMeetings
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllMeetingsGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllMeetings",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllMeetingsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllPaymentsByClientId
     *
     * @param clientId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllPaymentsByClientIdGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllPaymentsByClientId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllPaymentsByClientIdGet(
        @Parameter(name = "clientId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientId", required = false) Integer clientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllPaymentsByProjectId
     *
     * @param projectId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllPaymentsByProjectIdGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllPaymentsByProjectId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllPaymentsByProjectIdGet(
        @Parameter(name = "projectId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Integer projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllPayments
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllPaymentsGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllPayments",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllPaymentsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllProjectChangeByProjectId
     *
     * @param projectId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllProjectChangeByProjectIdGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllProjectChangeByProjectId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllProjectChangeByProjectIdGet(
        @Parameter(name = "projectId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Integer projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetAllProjectChange
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetAllProjectChangeGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetAllProjectChange",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetAllProjectChangeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetEmployeeByEmployeeId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetEmployeeByEmployeeIdGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetEmployeeByEmployeeId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetEmployeeByEmployeeIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ClientStrive/GetProjectsByClientId
     *
     * @param clientId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveGetProjectsByClientIdGet",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ClientStrive/GetProjectsByClientId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveGetProjectsByClientIdGet(
        @Parameter(name = "clientId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientId", required = false) Integer clientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/ClientStrive/UpdateEmployee
     *
     * @param ermEmployeeView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiClientStriveUpdateEmployeePut",
        tags = { "ClientStrive" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/ClientStrive/UpdateEmployee",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiClientStriveUpdateEmployeePut(
        @Parameter(name = "ErmEmployeeView", description = "") @Valid @RequestBody(required = false) ErmEmployeeView ermEmployeeView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/EventBooking/BookEvent
     *
     * @param eventBookingViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingBookEventPost",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/EventBooking/BookEvent",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingBookEventPost(
        @Parameter(name = "EventBookingViewModel", description = "") @Valid @RequestBody(required = false) EventBookingViewModel eventBookingViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/EventBooking/CreateEvent
     *
     * @param eventMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingCreateEventPost",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/EventBooking/CreateEvent",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingCreateEventPost(
        @Parameter(name = "EventMaster", description = "") @Valid @RequestBody(required = false) EventMaster eventMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/EventBooking/CreateUser
     *
     * @param eventUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingCreateUserPost",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/EventBooking/CreateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingCreateUserPost(
        @Parameter(name = "EventUser", description = "") @Valid @RequestBody(required = false) EventUser eventUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/DeleteBookingById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingDeleteBookingByIdGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/DeleteBookingById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingDeleteBookingByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/DeleteEventById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingDeleteEventByIdGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/DeleteEventById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingDeleteEventByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/DeleteUserById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingDeleteUserByIdGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/DeleteUserById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingDeleteUserByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetAllEventBooking
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetAllEventBookingGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetAllEventBooking",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetAllEventBookingGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetAllEvents
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetAllEventsGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetAllEvents",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetAllEventsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetAllUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetAllUsersGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetAllUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetAllUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetBookingById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetBookingByIdGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetBookingById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetBookingByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetBookingsByCustomer
     *
     * @param customerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetBookingsByCustomerGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetBookingsByCustomer",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetBookingsByCustomerGet(
        @Parameter(name = "customerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "customerId", required = false) Integer customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetBookingsByEvent
     *
     * @param eventId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetBookingsByEventGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetBookingsByEvent",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetBookingsByEventGet(
        @Parameter(name = "eventId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventId", required = false) Integer eventId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetEventById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetEventByIdGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetEventById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetEventByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetEventsByOrganizer
     *
     * @param organizerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetEventsByOrganizerGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetEventsByOrganizer",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetEventsByOrganizerGet(
        @Parameter(name = "organizerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "organizerId", required = false) Integer organizerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/EventBooking/GetProjectAssignmentByFilter
     *
     * @param eventFilter  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetProjectAssignmentByFilterPost",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/EventBooking/GetProjectAssignmentByFilter",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetProjectAssignmentByFilterPost(
        @Parameter(name = "EventFilter", description = "") @Valid @RequestBody(required = false) EventFilter eventFilter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/EventBooking/GetUserById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingGetUserByIdGet",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/EventBooking/GetUserById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingGetUserByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/EventBooking/Login
     *
     * @param eventLoginUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingLoginPost",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/EventBooking/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingLoginPost(
        @Parameter(name = "EventLoginUser", description = "") @Valid @RequestBody(required = false) EventLoginUser eventLoginUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/EventBooking/UpdateEvent
     *
     * @param eventMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingUpdateEventPost",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/EventBooking/UpdateEvent",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingUpdateEventPost(
        @Parameter(name = "EventMaster", description = "") @Valid @RequestBody(required = false) EventMaster eventMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/EventBooking/UpdateUser
     *
     * @param eventUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiEventBookingUpdateUserPost",
        tags = { "EventBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/EventBooking/UpdateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiEventBookingUpdateUserPost(
        @Parameter(name = "EventUser", description = "") @Valid @RequestBody(required = false) EventUser eventUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Goals/AddBulkCategories
     *
     * @param goalCategory  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsAddBulkCategoriesPost",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Goals/AddBulkCategories",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsAddBulkCategoriesPost(
        @Parameter(name = "GoalCategory", description = "") @Valid @RequestBody(required = false) List<@Valid GoalCategory> goalCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Goals/createNewGoal
     *
     * @param createGoalView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsCreateNewGoalPost",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Goals/createNewGoal",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsCreateNewGoalPost(
        @Parameter(name = "CreateGoalView", description = "") @Valid @RequestBody(required = false) CreateGoalView createGoalView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Goals/createNewUser
     *
     * @param goalUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsCreateNewUserPost",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Goals/createNewUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsCreateNewUserPost(
        @Parameter(name = "GoalUser", description = "") @Valid @RequestBody(required = false) GoalUser goalUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Goals/DeleteCategoryById
     *
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsDeleteCategoryByIdDelete",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Goals/DeleteCategoryById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsDeleteCategoryByIdDelete(
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Goals/DeleteGoalById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsDeleteGoalByIdGet",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Goals/DeleteGoalById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsDeleteGoalByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Goals/DeleteUserById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsDeleteUserByIdGet",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Goals/DeleteUserById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsDeleteUserByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Goals/GetAllCategories
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsGetAllCategoriesGet",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Goals/GetAllCategories",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsGetAllCategoriesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Goals/GetAllGoalsCreatedByUser
     *
     * @param userid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsGetAllGoalsCreatedByUserGet",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Goals/GetAllGoalsCreatedByUser",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsGetAllGoalsCreatedByUserGet(
        @Parameter(name = "userid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userid", required = false) Integer userid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Goals/GetAllGoals
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsGetAllGoalsGet",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Goals/GetAllGoals",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsGetAllGoalsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Goals/GetAllUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsGetAllUsersGet",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Goals/GetAllUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsGetAllUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Goals/getGoalById
     *
     * @param goalid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsGetGoalByIdGet",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Goals/getGoalById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsGetGoalByIdGet(
        @Parameter(name = "goalid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "goalid", required = false) Integer goalid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Goals/GetUserById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsGetUserByIdGet",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Goals/GetUserById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsGetUserByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Goals/Login
     *
     * @param goalLogin  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsLoginPost",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Goals/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsLoginPost(
        @Parameter(name = "GoalLogin", description = "") @Valid @RequestBody(required = false) GoalLogin goalLogin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Goals/UpdateGoal
     *
     * @param viewGoalView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsUpdateGoalPut",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Goals/UpdateGoal",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsUpdateGoalPut(
        @Parameter(name = "ViewGoalView", description = "") @Valid @RequestBody(required = false) ViewGoalView viewGoalView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Goals/updateUser
     *
     * @param goalUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGoalsUpdateUserPut",
        tags = { "Goals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Goals/updateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiGoalsUpdateUserPut(
        @Parameter(name = "GoalUser", description = "") @Valid @RequestBody(required = false) GoalUser goalUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/HospitalAppointment/AddNewAppointment
     *
     * @param hospitalAppointmentView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentAddNewAppointmentPost",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/HospitalAppointment/AddNewAppointment",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentAddNewAppointmentPost(
        @Parameter(name = "HospitalAppointmentView", description = "") @Valid @RequestBody(required = false) HospitalAppointmentView hospitalAppointmentView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/HospitalAppointment/AddNewPatient
     *
     * @param hospitalPatient  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentAddNewPatientPost",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/HospitalAppointment/AddNewPatient",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentAddNewPatientPost(
        @Parameter(name = "HospitalPatient", description = "") @Valid @RequestBody(required = false) HospitalPatient hospitalPatient
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/HospitalAppointment/DeleteAppointmentByAppointment
     *
     * @param appointmentId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentDeleteAppointmentByAppointmentDelete",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/HospitalAppointment/DeleteAppointmentByAppointment",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentDeleteAppointmentByAppointmentDelete(
        @Parameter(name = "appointmentId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "appointmentId", required = false) Integer appointmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/HospitalAppointment/DeletePatientByPatienId
     *
     * @param patientId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentDeletePatientByPatienIdDelete",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/HospitalAppointment/DeletePatientByPatienId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentDeletePatientByPatienIdDelete(
        @Parameter(name = "patientId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "patientId", required = false) Integer patientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HospitalAppointment/GetAllAppointments
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentGetAllAppointmentsGet",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HospitalAppointment/GetAllAppointments",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentGetAllAppointmentsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HospitalAppointment/GetAllPatients
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentGetAllPatientsGet",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HospitalAppointment/GetAllPatients",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentGetAllPatientsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HospitalAppointment/GetAppointmentByAppointmentId
     *
     * @param appointmentId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentGetAppointmentByAppointmentIdGet",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HospitalAppointment/GetAppointmentByAppointmentId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentGetAppointmentByAppointmentIdGet(
        @Parameter(name = "appointmentId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "appointmentId", required = false) Integer appointmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HospitalAppointment/GetDashboardData
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentGetDashboardDataGet",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HospitalAppointment/GetDashboardData",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentGetDashboardDataGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HospitalAppointment/GetPatientByPatientId
     *
     * @param patientId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentGetPatientByPatientIdGet",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HospitalAppointment/GetPatientByPatientId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentGetPatientByPatientIdGet(
        @Parameter(name = "patientId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "patientId", required = false) Integer patientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HospitalAppointment/GetTodaysAppointments
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentGetTodaysAppointmentsGet",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HospitalAppointment/GetTodaysAppointments",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentGetTodaysAppointmentsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HospitalAppointment/MarkAppointmentDone
     *
     * @param appointmentId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentMarkAppointmentDoneGet",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HospitalAppointment/MarkAppointmentDone",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentMarkAppointmentDoneGet(
        @Parameter(name = "appointmentId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "appointmentId", required = false) Integer appointmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/HospitalAppointment/UpdatePatient
     *
     * @param hospitalPatient  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHospitalAppointmentUpdatePatientPut",
        tags = { "HospitalAppointment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/HospitalAppointment/UpdatePatient",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHospitalAppointmentUpdatePatientPut(
        @Parameter(name = "HospitalPatient", description = "") @Valid @RequestBody(required = false) HospitalPatient hospitalPatient
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/HotelBooking/AddUpdateBulkRooms
     *
     * @param hotelRoomMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingAddUpdateBulkRoomsPost",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/HotelBooking/AddUpdateBulkRooms",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingAddUpdateBulkRoomsPost(
        @Parameter(name = "HotelRoomMaster", description = "") @Valid @RequestBody(required = false) List<@Valid HotelRoomMaster> hotelRoomMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/HotelBooking/AddUpdateCustomer
     *
     * @param hotelCustomer  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingAddUpdateCustomerPost",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/HotelBooking/AddUpdateCustomer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingAddUpdateCustomerPost(
        @Parameter(name = "HotelCustomer", description = "") @Valid @RequestBody(required = false) HotelCustomer hotelCustomer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/HotelBooking/AddUpdateUser
     *
     * @param hotelUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingAddUpdateUserPost",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/HotelBooking/AddUpdateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingAddUpdateUserPost(
        @Parameter(name = "HotelUser", description = "") @Valid @RequestBody(required = false) HotelUser hotelUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/HotelBooking/BookRoom
     *
     * @param newhotelBooking  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingBookRoomPost",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/HotelBooking/BookRoom",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingBookRoomPost(
        @Parameter(name = "NewhotelBooking", description = "") @Valid @RequestBody(required = false) NewhotelBooking newhotelBooking
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/HotelBooking/CancelBookingByBookingId
     *
     * @param bookingId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingCancelBookingByBookingIdDelete",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/HotelBooking/CancelBookingByBookingId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingCancelBookingByBookingIdDelete(
        @Parameter(name = "bookingId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookingId", required = false) Integer bookingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/HotelBooking/DeleteCustomerByCustomerId
     *
     * @param custId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingDeleteCustomerByCustomerIdDelete",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/HotelBooking/DeleteCustomerByCustomerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingDeleteCustomerByCustomerIdDelete(
        @Parameter(name = "custId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "custId", required = false) Integer custId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/HotelBooking/DeleteRoomByRoomId
     *
     * @param roomId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingDeleteRoomByRoomIdDelete",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/HotelBooking/DeleteRoomByRoomId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingDeleteRoomByRoomIdDelete(
        @Parameter(name = "roomId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "roomId", required = false) Integer roomId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/HotelBooking/DeleteUserByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingDeleteUserByUserIdDelete",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/HotelBooking/DeleteUserByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingDeleteUserByUserIdDelete(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/HotelBooking/FilterBooking
     *
     * @param filterhotelBooking  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingFilterBookingPost",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/HotelBooking/FilterBooking",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingFilterBookingPost(
        @Parameter(name = "FilterhotelBooking", description = "") @Valid @RequestBody(required = false) FilterhotelBooking filterhotelBooking
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HotelBooking/GetAllBookingsByRoomId
     *
     * @param roomId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingGetAllBookingsByRoomIdGet",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HotelBooking/GetAllBookingsByRoomId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingGetAllBookingsByRoomIdGet(
        @Parameter(name = "roomId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "roomId", required = false) Integer roomId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HotelBooking/GetAllBookings
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingGetAllBookingsGet",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HotelBooking/GetAllBookings",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingGetAllBookingsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HotelBooking/GetAllCustomers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingGetAllCustomersGet",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HotelBooking/GetAllCustomers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingGetAllCustomersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HotelBooking/GetAllRooms
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingGetAllRoomsGet",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HotelBooking/GetAllRooms",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingGetAllRoomsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HotelBooking/GetAllUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingGetAllUsersGet",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HotelBooking/GetAllUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingGetAllUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HotelBooking/GetBookingByBookingId
     *
     * @param bookingId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingGetBookingByBookingIdGet",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HotelBooking/GetBookingByBookingId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingGetBookingByBookingIdGet(
        @Parameter(name = "bookingId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookingId", required = false) Integer bookingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HotelBooking/GetBookingsByMonth
     *
     * @param month  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingGetBookingsByMonthGet",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HotelBooking/GetBookingsByMonth",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingGetBookingsByMonthGet(
        @Parameter(name = "month", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "month", required = false) Integer month
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/HotelBooking/GetBookingsCreatedByUser
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingGetBookingsCreatedByUserGet",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/HotelBooking/GetBookingsCreatedByUser",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingGetBookingsCreatedByUserGet(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/HotelBooking/Login
     *
     * @param trainLogin  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiHotelBookingLoginPost",
        tags = { "HotelBooking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/HotelBooking/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiHotelBookingLoginPost(
        @Parameter(name = "TrainLogin", description = "") @Valid @RequestBody(required = false) TrainLogin trainLogin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Interview/addLanguageQuestion
     *
     * @param inQuestion  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewAddLanguageQuestionPost",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Interview/addLanguageQuestion",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewAddLanguageQuestionPost(
        @Parameter(name = "InQuestion", description = "") @Valid @RequestBody(required = false) InQuestion inQuestion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Interview/addLanguageTopic
     *
     * @param inLanguageTopic  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewAddLanguageTopicPost",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Interview/addLanguageTopic",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewAddLanguageTopicPost(
        @Parameter(name = "InLanguageTopic", description = "") @Valid @RequestBody(required = false) InLanguageTopic inLanguageTopic
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Interview/addUpdateLanguage
     *
     * @param inLanguage  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewAddUpdateLanguagePost",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Interview/addUpdateLanguage",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewAddUpdateLanguagePost(
        @Parameter(name = "InLanguage", description = "") @Valid @RequestBody(required = false) InLanguage inLanguage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Interview/deleteLanguage
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewDeleteLanguageDelete",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Interview/deleteLanguage",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewDeleteLanguageDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Interview/deleteLanguageQuestion
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewDeleteLanguageQuestionDelete",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Interview/deleteLanguageQuestion",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewDeleteLanguageQuestionDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Interview/deleteLanguageTopic
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewDeleteLanguageTopicDelete",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Interview/deleteLanguageTopic",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewDeleteLanguageTopicDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Interview/GetAllLanguage
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewGetAllLanguageGet",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Interview/GetAllLanguage",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewGetAllLanguageGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Interview/GetAllQuestionsByLanguageId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewGetAllQuestionsByLanguageIdGet",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Interview/GetAllQuestionsByLanguageId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewGetAllQuestionsByLanguageIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Interview/GetAllQuestions
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewGetAllQuestionsGet",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Interview/GetAllQuestions",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewGetAllQuestionsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Interview/GetLanguageTopicById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewGetLanguageTopicByIdGet",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Interview/GetLanguageTopicById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewGetLanguageTopicByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Interview/GetLanguageTopic
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewGetLanguageTopicGet",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Interview/GetLanguageTopic",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewGetLanguageTopicGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Interview/GetQuestionByTopicId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewGetQuestionByTopicIdGet",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Interview/GetQuestionByTopicId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewGetQuestionByTopicIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Interview
     *
     * @param inQuestion  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInterviewPost",
        tags = { "Interview" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Interview",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInterviewPost(
        @Parameter(name = "InQuestion", description = "") @Valid @RequestBody(required = false) InQuestion inQuestion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Inventory/checkStockByProductId
     *
     * @param productId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryCheckStockByProductIdGet",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Inventory/checkStockByProductId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryCheckStockByProductIdGet(
        @Parameter(name = "productId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "productId", required = false) Integer productId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Inventory/CreateNewProduct
     *
     * @param stockProduct  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryCreateNewProductPost",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Inventory/CreateNewProduct",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryCreateNewProductPost(
        @Parameter(name = "StockProduct", description = "") @Valid @RequestBody(required = false) StockProduct stockProduct
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Inventory/CreateNewPurchase
     *
     * @param stockPurchase  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryCreateNewPurchasePost",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Inventory/CreateNewPurchase",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryCreateNewPurchasePost(
        @Parameter(name = "StockPurchase", description = "") @Valid @RequestBody(required = false) StockPurchase stockPurchase
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Inventory/CreateNewSale
     *
     * @param stockSale  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryCreateNewSalePost",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Inventory/CreateNewSale",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryCreateNewSalePost(
        @Parameter(name = "StockSale", description = "") @Valid @RequestBody(required = false) StockSale stockSale
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Inventory/GetAllProducts
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryGetAllProductsGet",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Inventory/GetAllProducts",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryGetAllProductsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Inventory/GetAllPurchase
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryGetAllPurchaseGet",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Inventory/GetAllPurchase",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryGetAllPurchaseGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Inventory/GetAllSale
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryGetAllSaleGet",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Inventory/GetAllSale",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryGetAllSaleGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Inventory/GetAllStock
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryGetAllStockGet",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Inventory/GetAllStock",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryGetAllStockGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Inventory/GetDashboardData
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiInventoryGetDashboardDataGet",
        tags = { "StockInventory" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Inventory/GetDashboardData",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiInventoryGetDashboardDataGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Jira/CreateProject
     *
     * @param jiraProject  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraCreateProjectPost",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Jira/CreateProject",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraCreateProjectPost(
        @Parameter(name = "JiraProject", description = "") @Valid @RequestBody(required = false) JiraProject jiraProject
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Jira/CreateTicket
     *
     * @param jiraIssue  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraCreateTicketPost",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Jira/CreateTicket",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraCreateTicketPost(
        @Parameter(name = "JiraIssue", description = "") @Valid @RequestBody(required = false) JiraIssue jiraIssue
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Jira/CreateUser
     *
     * @param jiraUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraCreateUserPost",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Jira/CreateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraCreateUserPost(
        @Parameter(name = "JiraUser", description = "") @Valid @RequestBody(required = false) JiraUser jiraUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Jira/DeleteProjectById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraDeleteProjectByIdDelete",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Jira/DeleteProjectById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraDeleteProjectByIdDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Jira/DeleteTicketById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraDeleteTicketByIdDelete",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Jira/DeleteTicketById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraDeleteTicketByIdDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Jira/DeleteUserById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraDeleteUserByIdDelete",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Jira/DeleteUserById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraDeleteUserByIdDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Jira/GetAllProjects
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraGetAllProjectsGet",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Jira/GetAllProjects",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraGetAllProjectsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Jira/GetAllTickets
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraGetAllTicketsGet",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Jira/GetAllTickets",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraGetAllTicketsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Jira/GetAllUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraGetAllUsersGet",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Jira/GetAllUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraGetAllUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Jira/GetTicketById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraGetTicketByIdPost",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Jira/GetTicketById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraGetTicketByIdPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Jira/GetTicketsAssignedByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraGetTicketsAssignedByUserIdGet",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Jira/GetTicketsAssignedByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraGetTicketsAssignedByUserIdGet(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Jira/GetTicketsByProjectId
     *
     * @param projectid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraGetTicketsByProjectIdGet",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Jira/GetTicketsByProjectId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraGetTicketsByProjectIdGet(
        @Parameter(name = "projectid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectid", required = false) Integer projectid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Jira/Login
     *
     * @param jiraUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraLoginPost",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Jira/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraLoginPost(
        @Parameter(name = "JiraUser", description = "") @Valid @RequestBody(required = false) JiraUser jiraUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Jira/UpdateProject
     *
     * @param jiraProject  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraUpdateProjectPut",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Jira/UpdateProject",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraUpdateProjectPut(
        @Parameter(name = "JiraProject", description = "") @Valid @RequestBody(required = false) JiraProject jiraProject
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Jira/UpdateTicket
     *
     * @param jiraIssue  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraUpdateTicketPut",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Jira/UpdateTicket",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraUpdateTicketPut(
        @Parameter(name = "JiraIssue", description = "") @Valid @RequestBody(required = false) JiraIssue jiraIssue
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Jira/UpdateUser
     *
     * @param jiraUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJiraUpdateUserPut",
        tags = { "Jira" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Jira/UpdateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJiraUpdateUserPut(
        @Parameter(name = "JiraUser", description = "") @Valid @RequestBody(required = false) JiraUser jiraUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/JobPortal/AddBulkJobCategory
     *
     * @param jobCategory  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalAddBulkJobCategoryPost",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/JobPortal/AddBulkJobCategory",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalAddBulkJobCategoryPost(
        @Parameter(name = "JobCategory", description = "") @Valid @RequestBody(required = false) List<@Valid JobCategory> jobCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/JobPortal/AddNewEmployer
     *
     * @param jobEmployer  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalAddNewEmployerPost",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/JobPortal/AddNewEmployer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalAddNewEmployerPost(
        @Parameter(name = "JobEmployer", description = "") @Valid @RequestBody(required = false) JobEmployer jobEmployer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/JobPortal/AddNewJobSeeker
     *
     * @param jobSeekerViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalAddNewJobSeekerPost",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/JobPortal/AddNewJobSeeker",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalAddNewJobSeekerPost(
        @Parameter(name = "JobSeekerViewModel", description = "") @Valid @RequestBody(required = false) JobSeekerViewModel jobSeekerViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/JobPortal/CreateNewJobListing
     *
     * @param jobListing  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalCreateNewJobListingPost",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/JobPortal/CreateNewJobListing",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalCreateNewJobListingPost(
        @Parameter(name = "JobListing", description = "") @Valid @RequestBody(required = false) JobListing jobListing
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/JobPortal/DeleteEmployerById
     *
     * @param employerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalDeleteEmployerByIdDelete",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/JobPortal/DeleteEmployerById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalDeleteEmployerByIdDelete(
        @Parameter(name = "employerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "employerId", required = false) Integer employerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/JobPortal/DeleteJobById
     *
     * @param jobid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalDeleteJobByIdDelete",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/JobPortal/DeleteJobById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalDeleteJobByIdDelete(
        @Parameter(name = "jobid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobid", required = false) Integer jobid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/JobPortal/DeleteJobCategoryByCategoryId
     *
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalDeleteJobCategoryByCategoryIdDelete",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/JobPortal/DeleteJobCategoryByCategoryId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalDeleteJobCategoryByCategoryIdDelete(
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/JobPortal/DeleteJobSeekerById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalDeleteJobSeekerByIdDelete",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/JobPortal/DeleteJobSeekerById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalDeleteJobSeekerByIdDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetActiveJobListing
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetActiveJobListingGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetActiveJobListing",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetActiveJobListingGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetAllEmployer
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetAllEmployerGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetAllEmployer",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetAllEmployerGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetAllJobApplcations
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetAllJobApplcationsGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetAllJobApplcations",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetAllJobApplcationsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetAllJobCategory
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetAllJobCategoryGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetAllJobCategory",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetAllJobCategoryGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetAllJobListing
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetAllJobListingGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetAllJobListing",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetAllJobListingGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetAllJobSeeker
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetAllJobSeekerGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetAllJobSeeker",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetAllJobSeekerGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetApplcationsByJobId
     *
     * @param jobId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetApplcationsByJobIdGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetApplcationsByJobId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetApplcationsByJobIdGet(
        @Parameter(name = "jobId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobId", required = false) Integer jobId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetApplcationsByJobSeekerId
     *
     * @param jobSeekerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetApplcationsByJobSeekerIdGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetApplcationsByJobSeekerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetApplcationsByJobSeekerIdGet(
        @Parameter(name = "jobSeekerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobSeekerId", required = false) Integer jobSeekerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetEmployerById
     *
     * @param employerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetEmployerByIdGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetEmployerById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetEmployerByIdGet(
        @Parameter(name = "employerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "employerId", required = false) Integer employerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetJobListingById
     *
     * @param jobId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetJobListingByIdGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetJobListingById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetJobListingByIdGet(
        @Parameter(name = "jobId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobId", required = false) Integer jobId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetJobSeekerById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetJobSeekerByIdGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetJobSeekerById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetJobSeekerByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/JobPortal/GetJobsByEmployerId
     *
     * @param employerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalGetJobsByEmployerIdGet",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/JobPortal/GetJobsByEmployerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalGetJobsByEmployerIdGet(
        @Parameter(name = "employerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "employerId", required = false) Integer employerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/JobPortal/Login
     *
     * @param jobUserView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalLoginPost",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/JobPortal/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalLoginPost(
        @Parameter(name = "JobUserView", description = "") @Valid @RequestBody(required = false) JobUserView jobUserView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/JobPortal/SendJobApplication
     *
     * @param jobApplication  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalSendJobApplicationPost",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/JobPortal/SendJobApplication",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalSendJobApplicationPost(
        @Parameter(name = "JobApplication", description = "") @Valid @RequestBody(required = false) JobApplication jobApplication
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/JobPortal/UpdateEmployer
     *
     * @param jobEmployer  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalUpdateEmployerPut",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/JobPortal/UpdateEmployer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalUpdateEmployerPut(
        @Parameter(name = "JobEmployer", description = "") @Valid @RequestBody(required = false) JobEmployer jobEmployer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/JobPortal/UpdateJobListing
     *
     * @param jobListing  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiJobPortalUpdateJobListingPut",
        tags = { "JobPortal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/JobPortal/UpdateJobListing",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiJobPortalUpdateJobListingPut(
        @Parameter(name = "JobListing", description = "") @Valid @RequestBody(required = false) JobListing jobListing
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/OnlineTest/AddBulkCategories
     *
     * @param quizCategory  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestAddBulkCategoriesPost",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/OnlineTest/AddBulkCategories",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestAddBulkCategoriesPost(
        @Parameter(name = "QuizCategory", description = "") @Valid @RequestBody(required = false) List<@Valid QuizCategory> quizCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/OnlineTest/AddUpdateBulkUsers
     *
     * @param quizUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestAddUpdateBulkUsersPost",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/OnlineTest/AddUpdateBulkUsers",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestAddUpdateBulkUsersPost(
        @Parameter(name = "QuizUser", description = "") @Valid @RequestBody(required = false) List<@Valid QuizUser> quizUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/OnlineTest/assignTest
     *
     * @param assignTestView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestAssignTestPost",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/OnlineTest/assignTest",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestAssignTestPost(
        @Parameter(name = "AssignTestView", description = "") @Valid @RequestBody(required = false) AssignTestView assignTestView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/OnlineTest/bulkUpdateAssignedTest
     *
     * @param quizAssignedtest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestBulkUpdateAssignedTestPut",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/OnlineTest/bulkUpdateAssignedTest",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestBulkUpdateAssignedTestPut(
        @Parameter(name = "QuizAssignedtest", description = "") @Valid @RequestBody(required = false) List<@Valid QuizAssignedtest> quizAssignedtest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/OnlineTest/createNewQuestion
     *
     * @param quizQuestionsViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestCreateNewQuestionPost",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/OnlineTest/createNewQuestion",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestCreateNewQuestionPost(
        @Parameter(name = "QuizQuestionsViewModel", description = "") @Valid @RequestBody(required = false) QuizQuestionsViewModel quizQuestionsViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/OnlineTest/createNewTest
     *
     * @param quizTestViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestCreateNewTestPost",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/OnlineTest/createNewTest",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestCreateNewTestPost(
        @Parameter(name = "QuizTestViewModel", description = "") @Valid @RequestBody(required = false) QuizTestViewModel quizTestViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/OnlineTest/createNewUser
     *
     * @param quizUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestCreateNewUserPost",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/OnlineTest/createNewUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestCreateNewUserPost(
        @Parameter(name = "QuizUser", description = "") @Valid @RequestBody(required = false) QuizUser quizUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/DeleteAnswersByTestId
     *
     * @param testId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestDeleteAnswersByTestIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/DeleteAnswersByTestId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestDeleteAnswersByTestIdGet(
        @Parameter(name = "testId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "testId", required = false) Integer testId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/DeleteAssignedTestByAssignTestId
     *
     * @param assignedTestId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestDeleteAssignedTestByAssignTestIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/DeleteAssignedTestByAssignTestId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestDeleteAssignedTestByAssignTestIdGet(
        @Parameter(name = "assignedTestId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assignedTestId", required = false) Integer assignedTestId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/DeleteAssignedTestByRegCode
     *
     * @param regCode  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestDeleteAssignedTestByRegCodeGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/DeleteAssignedTestByRegCode",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestDeleteAssignedTestByRegCodeGet(
        @Parameter(name = "regCode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "regCode", required = false) String regCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/OnlineTest/DeleteCategoryById
     *
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestDeleteCategoryByIdDelete",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/OnlineTest/DeleteCategoryById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestDeleteCategoryByIdDelete(
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/DeleteQuestionById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestDeleteQuestionByIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/DeleteQuestionById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestDeleteQuestionByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/DeleteTestByTestId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestDeleteTestByTestIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/DeleteTestByTestId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestDeleteTestByTestIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/DeleteUserById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestDeleteUserByIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/DeleteUserById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestDeleteUserByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetAllAssignedTestByRegistrationCode
     *
     * @param regCode  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetAllAssignedTestByRegistrationCodeGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetAllAssignedTestByRegistrationCode",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetAllAssignedTestByRegistrationCodeGet(
        @Parameter(name = "regCode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "regCode", required = false) String regCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetAllAssignedTest
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetAllAssignedTestGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetAllAssignedTest",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetAllAssignedTestGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetAllCategories
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetAllCategoriesGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetAllCategories",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetAllCategoriesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/getAllQuestionByCategoryId
     *
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetAllQuestionByCategoryIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/getAllQuestionByCategoryId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetAllQuestionByCategoryIdGet(
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/getAllQuestionByTestId
     *
     * @param testId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetAllQuestionByTestIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/getAllQuestionByTestId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetAllQuestionByTestIdGet(
        @Parameter(name = "testId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "testId", required = false) Integer testId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetAllQuestions
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetAllQuestionsGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetAllQuestions",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetAllQuestionsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetAllTest
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetAllTestGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetAllTest",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetAllTestGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetAllUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetAllUsersGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetAllUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetAllUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/getQuestionId
     *
     * @param questionId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetQuestionIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/getQuestionId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetQuestionIdGet(
        @Parameter(name = "questionId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "questionId", required = false) Integer questionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetTestAnswers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetTestAnswersGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetTestAnswers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetTestAnswersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/getTestByTestId
     *
     * @param testId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetTestByTestIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/getTestByTestId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetTestByTestIdGet(
        @Parameter(name = "testId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "testId", required = false) Integer testId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetTestResultByRegCode
     *
     * @param regCode  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetTestResultByRegCodeGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetTestResultByRegCode",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetTestResultByRegCodeGet(
        @Parameter(name = "regCode", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "regCode", required = false) String regCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/OnlineTest/GetUserById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestGetUserByIdGet",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/OnlineTest/GetUserById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestGetUserByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/OnlineTest/Login
     *
     * @param testLogin  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestLoginPost",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/OnlineTest/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestLoginPost(
        @Parameter(name = "TestLogin", description = "") @Valid @RequestBody(required = false) TestLogin testLogin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/OnlineTest/SubmitTest
     *
     * @param quizAssignedtestViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestSubmitTestPost",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/OnlineTest/SubmitTest",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestSubmitTestPost(
        @Parameter(name = "QuizAssignedtestViewModel", description = "") @Valid @RequestBody(required = false) QuizAssignedtestViewModel quizAssignedtestViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/OnlineTest/UpdateQuestion
     *
     * @param quizQuestionsViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestUpdateQuestionPut",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/OnlineTest/UpdateQuestion",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestUpdateQuestionPut(
        @Parameter(name = "QuizQuestionsViewModel", description = "") @Valid @RequestBody(required = false) QuizQuestionsViewModel quizQuestionsViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/OnlineTest/UpdateTest
     *
     * @param quizTestViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestUpdateTestPut",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/OnlineTest/UpdateTest",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestUpdateTestPut(
        @Parameter(name = "QuizTestViewModel", description = "") @Valid @RequestBody(required = false) QuizTestViewModel quizTestViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/OnlineTest/updateUser
     *
     * @param quizUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiOnlineTestUpdateUserPut",
        tags = { "OnlineTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/OnlineTest/updateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiOnlineTestUpdateUserPut(
        @Parameter(name = "QuizUser", description = "") @Valid @RequestBody(required = false) QuizUser quizUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddEnquiry
     *
     * @param enquiryView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddEnquiryPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = EnquiryView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnquiryView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = EnquiryView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddEnquiry",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<EnquiryView> apiResortAddEnquiryPost(
        @Parameter(name = "EnquiryView", description = "") @Valid @RequestBody(required = false) EnquiryView enquiryView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddExtraDetails
     *
     * @param weddingMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddExtraDetailsPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WeddingMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeddingMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WeddingMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddExtraDetails",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<WeddingMasterView> apiResortAddExtraDetailsPost(
        @Parameter(name = "WeddingMasterView", description = "") @Valid @RequestBody(required = false) WeddingMasterView weddingMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.637376656633329, \"ExtraWeddingDetails\" : [ { \"DetailId\" : 7, \"Requirment\" : \"Requirment\", \"Rate\" : 5.025004791520295, \"NoOfPax\" : 4, \"Total\" : 9.965781217890562, \"WeddingId\" : 9, \"ServiceId\" : 1 }, { \"DetailId\" : 7, \"Requirment\" : \"Requirment\", \"Rate\" : 5.025004791520295, \"NoOfPax\" : 4, \"Total\" : 9.965781217890562, \"WeddingId\" : 9, \"ServiceId\" : 1 } ], \"Discount\" : 3.616076749251911, \"Message\" : \"Message\", \"ConfirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"WeddingId\" : 6, \"Reason\" : \"Reason\", \"Result\" : true, \"SGST\" : 7.061401241503109, \"WeddingPackageId\" : 2, \"WeddingDetails\" : [ { \"DetailId\" : 4, \"Requirment\" : \"Requirment\", \"Rate\" : 1.0246457001441578, \"NoOfPax\" : 1, \"Total\" : 1.4894159098541704, \"WeddingId\" : 6, \"ServiceId\" : 7 }, { \"DetailId\" : 4, \"Requirment\" : \"Requirment\", \"Rate\" : 1.0246457001441578, \"NoOfPax\" : 1, \"Total\" : 1.4894159098541704, \"WeddingId\" : 6, \"ServiceId\" : 7 } ], \"BookingUId\" : \"BookingUId\", \"CGST\" : 9.301444243932576, \"CustomerName\" : \"CustomerName\", \"ArrivalTime\" : \"ArrivalTime\", \"LastUpdatedBy\" : 0, \"IsDeleted\" : true, \"Venue\" : \"Venue\", \"CustomerId\" : 1, \"TotalAmount\" : 5.962133916683182, \"RelieveTime\" : \"RelieveTime\", \"IsConfermed\" : \"IsConfermed\", \"Details\" : \"Details\", \"UserId\" : 2, \"IsAlacarte\" : true, \"SContact\" : \"SContact\", \"PContact\" : \"PContact\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddFoodItem
     *
     * @param foodItemView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddFoodItemPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = FoodItemView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodItemView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = FoodItemView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddFoodItem",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<FoodItemView> apiResortAddFoodItemPost(
        @Parameter(name = "FoodItemView", description = "") @Valid @RequestBody(required = false) FoodItemView foodItemView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"FoodItemTypeId\" : 5, \"FullPrice\" : 6.027456183070403, \"IsVeg\" : true, \"Message\" : \"Message\", \"IsHalf\" : true, \"IsAvailable\" : true, \"ItemName\" : \"ItemName\", \"HalfPrice\" : 1.4658129805029452, \"ItemId\" : 0, \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddFoodItemtype
     *
     * @param foodItemType  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddFoodItemtypePost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = FoodItemType.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodItemType.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = FoodItemType.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddFoodItemtype",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<FoodItemType> apiResortAddFoodItemtypePost(
        @Parameter(name = "FoodItemType", description = "") @Valid @RequestBody(required = false) FoodItemType foodItemType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"FoodItemTypeId\" : 0, \"IsDeleted\" : true, \"FoodItemName\" : \"FoodItemName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/addMaster
     *
     * @param statusMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddMasterPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = StatusMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = StatusMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/addMaster",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<StatusMasterView> apiResortAddMasterPost(
        @Parameter(name = "StatusMasterView", description = "") @Valid @RequestBody(required = false) StatusMasterView statusMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Status\" : \"Status\", \"Message\" : \"Message\", \"StatusId\" : 0, \"StatusFor\" : \"StatusFor\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddOffer
     *
     * @param offerView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddOfferPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = OfferView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = OfferView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = OfferView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddOffer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<OfferView> apiResortAddOfferPost(
        @Parameter(name = "OfferView", description = "") @Valid @RequestBody(required = false) OfferView offerView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"OfferId\" : 0, \"OfferName\" : \"OfferName\", \"IsDeleted\" : true, \"Message\" : \"Message\", \"IsActive\" : true, \"Amount\" : 6.027456183070403, \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"OfferDetails\" : \"OfferDetails\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddOrder
     *
     * @param foodOrderView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddOrderPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = FoodOrderView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodOrderView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = FoodOrderView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddOrder",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<FoodOrderView> apiResortAddOrderPost(
        @Parameter(name = "FoodOrderView", description = "") @Valid @RequestBody(required = false) FoodOrderView foodOrderView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"MobileNo\" : \"MobileNo\", \"Message\" : \"Message\", \"OrderNo\" : 5, \"OrderId\" : 0, \"Name\" : \"Name\", \"OrderDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Result\" : true, \"OrderStatus\" : \"OrderStatus\", \"OrderUniqeId\" : \"OrderUniqeId\", \"FoodOrderItems\" : [ { \"Rate\" : 3.616076749251911, \"Total\" : 4.145608029883936, \"Quantity\" : 9, \"Naration\" : \"Naration\", \"OrderId\" : 2, \"ItemId\" : 7, \"OrderItemId\" : 2 }, { \"Rate\" : 3.616076749251911, \"Total\" : 4.145608029883936, \"Quantity\" : 9, \"Naration\" : \"Naration\", \"OrderId\" : 2, \"ItemId\" : 7, \"OrderItemId\" : 2 } ], \"UserId\" : 5, \"BookingId\" : 1, \"OrderTotal\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddRoom
     *
     * @param roomViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddRoomPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = RoomViewModel.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoomViewModel.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = RoomViewModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddRoom",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<RoomViewModel> apiResortAddRoomPost(
        @Parameter(name = "RoomViewModel", description = "") @Valid @RequestBody(required = false) RoomViewModel roomViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"RoomTypeId\" : 6, \"RoomNo\" : \"RoomNo\", \"RoomExtensionNo\" : \"RoomExtensionNo\", \"RoomStatus\" : 5, \"Message\" : \"Message\", \"RoomId\" : 0, \"TotalBed\" : 1, \"RoomCapacity\" : 5, \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddService
     *
     * @param servicesView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddServicePost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ServicesView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServicesView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ServicesView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddService",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ServicesView> apiResortAddServicePost(
        @Parameter(name = "ServicesView", description = "") @Valid @RequestBody(required = false) ServicesView servicesView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Sgst\" : 5.962133916683182, \"IsDeleted\" : true, \"Message\" : \"Message\", \"ServiceName\" : \"ServiceName\", \"Cgst\" : 1.4658129805029452, \"TaxableAmount\" : 6.027456183070403, \"IsActive\" : true, \"ServiceId\" : 0, \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddUpdateBulkWeddingService
     *
     * @param weddingServiceView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddUpdateBulkWeddingServicePost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Boolean.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = Boolean.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddUpdateBulkWeddingService",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<Boolean> apiResortAddUpdateBulkWeddingServicePost(
        @Parameter(name = "WeddingServiceView", description = "") @Valid @RequestBody(required = false) List<@Valid WeddingServiceView> weddingServiceView
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddUpdateRoomType
     *
     * @param roomTypeViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddUpdateRoomTypePost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = RoomTypeViewModel.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoomTypeViewModel.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = RoomTypeViewModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddUpdateRoomType",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<RoomTypeViewModel> apiResortAddUpdateRoomTypePost(
        @Parameter(name = "RoomTypeViewModel", description = "") @Valid @RequestBody(required = false) RoomTypeViewModel roomTypeViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"RoomTypeId\" : 0, \"RoomTypeName\" : \"RoomTypeName\", \"Message\" : \"Message\", \"RoomMaxCapacity\" : 6, \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddUser
     *
     * @param userMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddUserPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = UserMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = UserMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<UserMasterView> apiResortAddUserPost(
        @Parameter(name = "UserMasterView", description = "") @Valid @RequestBody(required = false) UserMasterView userMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Role\" : \"Role\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"UserId\" : 0, \"Password\" : \"Password\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddVisit
     *
     * @param waterCustomerObj  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddVisitPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WaterCustomerObj.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WaterCustomerObj.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WaterCustomerObj.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddVisit",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<WaterCustomerObj> apiResortAddVisitPost(
        @Parameter(name = "WaterCustomerObj", description = "") @Valid @RequestBody(required = false) WaterCustomerObj waterCustomerObj
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Discount\" : 5.962133916683182, \"User\" : \"User\", \"Message\" : \"Message\", \"NoOfMembers\" : 9, \"CityOthr\" : \"CityOthr\", \"CreateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Reason\" : \"Reason\", \"Name\" : \"Name\", \"ServiceId\" : 2, \"Result\" : true, \"BookingToDate\" : \"2000-01-23T04:56:07.000+00:00\", \"PaymentBy\" : \"PaymentBy\", \"BookingUId\" : \"BookingUId\", \"isConfirm\" : \"isConfirm\", \"TicketNo\" : \"TicketNo\", \"Remaining\" : 7.386281948385884, \"EmailId\" : \"EmailId\", \"Advance\" : 4.145608029883936, \"Reference\" : 2, \"ReferenceMode\" : \"ReferenceMode\", \"Rate\" : 1, \"Childrens\" : 1, \"RemainingPaidAmt\" : 5.637376656633329, \"IsAdvance\" : true, \"Service\" : \"Service\", \"IsDone\" : true, \"CustomerId\" : 6, \"City\" : \"City\", \"TotalAmount\" : 3.616076749251911, \"VisitId\" : 0, \"TicketDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Mobile\" : \"Mobile\", \"confirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"UserId\" : 7, \"IsDelete\" : true, \"ChildRate\" : 7, \"AdultRate\" : 6, \"PackageId\" : 1, \"PaymentDetails\" : \"PaymentDetails\", \"Adults\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddWeddingFood
     *
     * @param id  (optional)
     * @param obj  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddWeddingFoodPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Boolean.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = Boolean.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddWeddingFood",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<Boolean> apiResortAddWeddingFoodPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id,
        @Parameter(name = "obj", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "obj", required = false) List<@Valid WeddingFoodItems> obj
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddweddingAllotment
     *
     * @param weddingAllotment  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddweddingAllotmentPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WeddingAllotment.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeddingAllotment.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WeddingAllotment.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddweddingAllotment",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<WeddingAllotment> apiResortAddweddingAllotmentPost(
        @Parameter(name = "WeddingAllotment", description = "") @Valid @RequestBody(required = false) WeddingAllotment weddingAllotment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"TotalGuest\" : 5, \"RoomNo\" : \"RoomNo\", \"CreationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"CheckinDate\" : \"2000-01-23T04:56:07.000+00:00\", \"CheckOutTime\" : \"CheckOutTime\", \"CreatedBy\" : 5, \"AllotId\" : 0, \"WeddingId\" : 6, \"RoomId\" : 1, \"CheckinTime\" : \"CheckinTime\", \"BookingId\" : \"BookingId\", \"RateGiven\" : 2.3021358869347655, \"CheckOutDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/Addwedding
     *
     * @param weddingMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddweddingPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WeddingMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeddingMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WeddingMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/Addwedding",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<WeddingMasterView> apiResortAddweddingPost(
        @Parameter(name = "WeddingMasterView", description = "") @Valid @RequestBody(required = false) WeddingMasterView weddingMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.637376656633329, \"ExtraWeddingDetails\" : [ { \"DetailId\" : 7, \"Requirment\" : \"Requirment\", \"Rate\" : 5.025004791520295, \"NoOfPax\" : 4, \"Total\" : 9.965781217890562, \"WeddingId\" : 9, \"ServiceId\" : 1 }, { \"DetailId\" : 7, \"Requirment\" : \"Requirment\", \"Rate\" : 5.025004791520295, \"NoOfPax\" : 4, \"Total\" : 9.965781217890562, \"WeddingId\" : 9, \"ServiceId\" : 1 } ], \"Discount\" : 3.616076749251911, \"Message\" : \"Message\", \"ConfirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"WeddingId\" : 6, \"Reason\" : \"Reason\", \"Result\" : true, \"SGST\" : 7.061401241503109, \"WeddingPackageId\" : 2, \"WeddingDetails\" : [ { \"DetailId\" : 4, \"Requirment\" : \"Requirment\", \"Rate\" : 1.0246457001441578, \"NoOfPax\" : 1, \"Total\" : 1.4894159098541704, \"WeddingId\" : 6, \"ServiceId\" : 7 }, { \"DetailId\" : 4, \"Requirment\" : \"Requirment\", \"Rate\" : 1.0246457001441578, \"NoOfPax\" : 1, \"Total\" : 1.4894159098541704, \"WeddingId\" : 6, \"ServiceId\" : 7 } ], \"BookingUId\" : \"BookingUId\", \"CGST\" : 9.301444243932576, \"CustomerName\" : \"CustomerName\", \"ArrivalTime\" : \"ArrivalTime\", \"LastUpdatedBy\" : 0, \"IsDeleted\" : true, \"Venue\" : \"Venue\", \"CustomerId\" : 1, \"TotalAmount\" : 5.962133916683182, \"RelieveTime\" : \"RelieveTime\", \"IsConfermed\" : \"IsConfermed\", \"Details\" : \"Details\", \"UserId\" : 2, \"IsAlacarte\" : true, \"SContact\" : \"SContact\", \"PContact\" : \"PContact\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/AddweddingService
     *
     * @param weddingServiceView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortAddweddingServicePost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WeddingServiceView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeddingServiceView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WeddingServiceView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/AddweddingService",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<WeddingServiceView> apiResortAddweddingServicePost(
        @Parameter(name = "WeddingServiceView", description = "") @Valid @RequestBody(required = false) WeddingServiceView weddingServiceView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"IsDeleted\" : true, \"Message\" : \"Message\", \"Rate\" : 6.027456183070403, \"IsActive\" : true, \"ServiceType\" : \"ServiceType\", \"IsPax\" : true, \"OrderNo\" : 1, \"ServiceId\" : 0, \"Result\" : true, \"Name\" : \"Name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/CreateUpdateBooking
     *
     * @param booking  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortCreateUpdateBookingPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/CreateUpdateBooking",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortCreateUpdateBookingPost(
        @Parameter(name = "Booking", description = "") @Valid @RequestBody(required = false) Booking booking
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/CreateUpdateWeddingPackage
     *
     * @param weddingPackage  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortCreateUpdateWeddingPackagePost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/CreateUpdateWeddingPackage",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortCreateUpdateWeddingPackagePost(
        @Parameter(name = "WeddingPackage", description = "") @Valid @RequestBody(required = false) WeddingPackage weddingPackage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteBookingById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteBookingByIdPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteBookingById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortDeleteBookingByIdPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteEnquiry
     *
     * @param enquiryView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteEnquiryPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = EnquiryView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnquiryView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = EnquiryView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteEnquiry",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<EnquiryView> apiResortDeleteEnquiryPost(
        @Parameter(name = "EnquiryView", description = "") @Valid @RequestBody(required = false) EnquiryView enquiryView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteFoodItem
     *
     * @param foodItemView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteFoodItemPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = FoodItemView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodItemView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = FoodItemView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteFoodItem",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<FoodItemView> apiResortDeleteFoodItemPost(
        @Parameter(name = "FoodItemView", description = "") @Valid @RequestBody(required = false) FoodItemView foodItemView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"FoodItemTypeId\" : 5, \"FullPrice\" : 6.027456183070403, \"IsVeg\" : true, \"Message\" : \"Message\", \"IsHalf\" : true, \"IsAvailable\" : true, \"ItemName\" : \"ItemName\", \"HalfPrice\" : 1.4658129805029452, \"ItemId\" : 0, \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/deleteMaster
     *
     * @param statusMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteMasterPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = StatusMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = StatusMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/deleteMaster",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<StatusMasterView> apiResortDeleteMasterPost(
        @Parameter(name = "StatusMasterView", description = "") @Valid @RequestBody(required = false) StatusMasterView statusMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Status\" : \"Status\", \"Message\" : \"Message\", \"StatusId\" : 0, \"StatusFor\" : \"StatusFor\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteOffer
     *
     * @param offerView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteOfferPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = OfferView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = OfferView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = OfferView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteOffer",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<OfferView> apiResortDeleteOfferPost(
        @Parameter(name = "OfferView", description = "") @Valid @RequestBody(required = false) OfferView offerView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"OfferId\" : 0, \"OfferName\" : \"OfferName\", \"IsDeleted\" : true, \"Message\" : \"Message\", \"IsActive\" : true, \"Amount\" : 6.027456183070403, \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"OfferDetails\" : \"OfferDetails\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteOrder
     *
     * @param foodOrderView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteOrderPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = FoodOrderView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodOrderView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = FoodOrderView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteOrder",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<FoodOrderView> apiResortDeleteOrderPost(
        @Parameter(name = "FoodOrderView", description = "") @Valid @RequestBody(required = false) FoodOrderView foodOrderView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"MobileNo\" : \"MobileNo\", \"Message\" : \"Message\", \"OrderNo\" : 5, \"OrderId\" : 0, \"Name\" : \"Name\", \"OrderDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Result\" : true, \"OrderStatus\" : \"OrderStatus\", \"OrderUniqeId\" : \"OrderUniqeId\", \"FoodOrderItems\" : [ { \"Rate\" : 3.616076749251911, \"Total\" : 4.145608029883936, \"Quantity\" : 9, \"Naration\" : \"Naration\", \"OrderId\" : 2, \"ItemId\" : 7, \"OrderItemId\" : 2 }, { \"Rate\" : 3.616076749251911, \"Total\" : 4.145608029883936, \"Quantity\" : 9, \"Naration\" : \"Naration\", \"OrderId\" : 2, \"ItemId\" : 7, \"OrderItemId\" : 2 } ], \"UserId\" : 5, \"BookingId\" : 1, \"OrderTotal\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteRoom
     *
     * @param roomViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteRoomPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = RoomViewModel.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoomViewModel.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = RoomViewModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteRoom",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<RoomViewModel> apiResortDeleteRoomPost(
        @Parameter(name = "RoomViewModel", description = "") @Valid @RequestBody(required = false) RoomViewModel roomViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"RoomTypeId\" : 6, \"RoomNo\" : \"RoomNo\", \"RoomExtensionNo\" : \"RoomExtensionNo\", \"RoomStatus\" : 5, \"Message\" : \"Message\", \"RoomId\" : 0, \"TotalBed\" : 1, \"RoomCapacity\" : 5, \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteService
     *
     * @param servicesView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteServicePost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ServicesView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServicesView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ServicesView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteService",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ServicesView> apiResortDeleteServicePost(
        @Parameter(name = "ServicesView", description = "") @Valid @RequestBody(required = false) ServicesView servicesView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Sgst\" : 5.962133916683182, \"IsDeleted\" : true, \"Message\" : \"Message\", \"ServiceName\" : \"ServiceName\", \"Cgst\" : 1.4658129805029452, \"TaxableAmount\" : 6.027456183070403, \"IsActive\" : true, \"ServiceId\" : 0, \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteUser
     *
     * @param userMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteUserPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = UserMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = UserMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<UserMasterView> apiResortDeleteUserPost(
        @Parameter(name = "UserMasterView", description = "") @Valid @RequestBody(required = false) UserMasterView userMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Role\" : \"Role\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"UserId\" : 0, \"Password\" : \"Password\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteWeddingFood
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteWeddingFoodPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Boolean.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = Boolean.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteWeddingFood",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<Boolean> apiResortDeleteWeddingFoodPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteWeddingPackageById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteWeddingPackageByIdPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteWeddingPackageById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortDeleteWeddingPackageByIdPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/Deletewedding
     *
     * @param weddingMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteweddingPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WeddingMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeddingMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WeddingMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/Deletewedding",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<WeddingMasterView> apiResortDeleteweddingPost(
        @Parameter(name = "WeddingMasterView", description = "") @Valid @RequestBody(required = false) WeddingMasterView weddingMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.637376656633329, \"ExtraWeddingDetails\" : [ { \"DetailId\" : 7, \"Requirment\" : \"Requirment\", \"Rate\" : 5.025004791520295, \"NoOfPax\" : 4, \"Total\" : 9.965781217890562, \"WeddingId\" : 9, \"ServiceId\" : 1 }, { \"DetailId\" : 7, \"Requirment\" : \"Requirment\", \"Rate\" : 5.025004791520295, \"NoOfPax\" : 4, \"Total\" : 9.965781217890562, \"WeddingId\" : 9, \"ServiceId\" : 1 } ], \"Discount\" : 3.616076749251911, \"Message\" : \"Message\", \"ConfirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"WeddingId\" : 6, \"Reason\" : \"Reason\", \"Result\" : true, \"SGST\" : 7.061401241503109, \"WeddingPackageId\" : 2, \"WeddingDetails\" : [ { \"DetailId\" : 4, \"Requirment\" : \"Requirment\", \"Rate\" : 1.0246457001441578, \"NoOfPax\" : 1, \"Total\" : 1.4894159098541704, \"WeddingId\" : 6, \"ServiceId\" : 7 }, { \"DetailId\" : 4, \"Requirment\" : \"Requirment\", \"Rate\" : 1.0246457001441578, \"NoOfPax\" : 1, \"Total\" : 1.4894159098541704, \"WeddingId\" : 6, \"ServiceId\" : 7 } ], \"BookingUId\" : \"BookingUId\", \"CGST\" : 9.301444243932576, \"CustomerName\" : \"CustomerName\", \"ArrivalTime\" : \"ArrivalTime\", \"LastUpdatedBy\" : 0, \"IsDeleted\" : true, \"Venue\" : \"Venue\", \"CustomerId\" : 1, \"TotalAmount\" : 5.962133916683182, \"RelieveTime\" : \"RelieveTime\", \"IsConfermed\" : \"IsConfermed\", \"Details\" : \"Details\", \"UserId\" : 2, \"IsAlacarte\" : true, \"SContact\" : \"SContact\", \"PContact\" : \"PContact\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/DeleteweddingService
     *
     * @param weddingServiceView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortDeleteweddingServicePost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WeddingServiceView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeddingServiceView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WeddingServiceView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/DeleteweddingService",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<WeddingServiceView> apiResortDeleteweddingServicePost(
        @Parameter(name = "WeddingServiceView", description = "") @Valid @RequestBody(required = false) WeddingServiceView weddingServiceView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"IsDeleted\" : true, \"Message\" : \"Message\", \"Rate\" : 6.027456183070403, \"IsActive\" : true, \"ServiceType\" : \"ServiceType\", \"IsPax\" : true, \"OrderNo\" : 1, \"ServiceId\" : 0, \"Result\" : true, \"Name\" : \"Name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllAllotment
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllAllotmentGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WeddingAllotment.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeddingAllotment.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WeddingAllotment.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllAllotment",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WeddingAllotment>> apiResortGetAllAllotmentGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"TotalGuest\" : 5, \"RoomNo\" : \"RoomNo\", \"CreationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"CheckinDate\" : \"2000-01-23T04:56:07.000+00:00\", \"CheckOutTime\" : \"CheckOutTime\", \"CreatedBy\" : 5, \"AllotId\" : 0, \"WeddingId\" : 6, \"RoomId\" : 1, \"CheckinTime\" : \"CheckinTime\", \"BookingId\" : \"BookingId\", \"RateGiven\" : 2.3021358869347655, \"CheckOutDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"TotalGuest\" : 5, \"RoomNo\" : \"RoomNo\", \"CreationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"CheckinDate\" : \"2000-01-23T04:56:07.000+00:00\", \"CheckOutTime\" : \"CheckOutTime\", \"CreatedBy\" : 5, \"AllotId\" : 0, \"WeddingId\" : 6, \"RoomId\" : 1, \"CheckinTime\" : \"CheckinTime\", \"BookingId\" : \"BookingId\", \"RateGiven\" : 2.3021358869347655, \"CheckOutDate\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllBookings
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllBookingsGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllBookings",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortGetAllBookingsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllEnquiryBySubject
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllEnquiryBySubjectGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllEnquiryBySubject",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<EnquiryView>> apiResortGetAllEnquiryBySubjectGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 }, { \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/GetAllEnquiry
     *
     * @param enquirySearch  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllEnquiryPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/GetAllEnquiry",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<List<EnquiryView>> apiResortGetAllEnquiryPost(
        @Parameter(name = "EnquirySearch", description = "") @Valid @RequestBody(required = false) EnquirySearch enquirySearch
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 }, { \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllFoodItemType
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllFoodItemTypeGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = FoodItemType.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FoodItemType.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = FoodItemType.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllFoodItemType",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<FoodItemType>> apiResortGetAllFoodItemTypeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"FoodItemTypeId\" : 0, \"IsDeleted\" : true, \"FoodItemName\" : \"FoodItemName\" }, { \"FoodItemTypeId\" : 0, \"IsDeleted\" : true, \"FoodItemName\" : \"FoodItemName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllHead
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllHeadGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllHead",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<StatusMasterViewModel>> apiResortGetAllHeadGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Status\" : \"Status\", \"StatusId\" : 0, \"StatusFor\" : \"StatusFor\" }, { \"Status\" : \"Status\", \"StatusId\" : 0, \"StatusFor\" : \"StatusFor\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/getAllMaster
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllMasterGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/getAllMaster",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<StatusMasterViewModel>> apiResortGetAllMasterGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Status\" : \"Status\", \"StatusId\" : 0, \"StatusFor\" : \"StatusFor\" }, { \"Status\" : \"Status\", \"StatusId\" : 0, \"StatusFor\" : \"StatusFor\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllOffer
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllOfferGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = Offer.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Offer.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = Offer.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllOffer",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<Offer>> apiResortGetAllOfferGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"OfferId\" : 0, \"OfferName\" : \"OfferName\", \"IsDeleted\" : true, \"IsActive\" : true, \"Amount\" : 6.027456183070403, \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"OfferDetails\" : \"OfferDetails\" }, { \"OfferId\" : 0, \"OfferName\" : \"OfferName\", \"IsDeleted\" : true, \"IsActive\" : true, \"Amount\" : 6.027456183070403, \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"OfferDetails\" : \"OfferDetails\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllRoom
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllRoomGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = RoomListViewModel.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RoomListViewModel.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = RoomListViewModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllRoom",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<RoomListViewModel>> apiResortGetAllRoomGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"RoomStatusName\" : \"RoomStatusName\", \"RoomNo\" : \"RoomNo\", \"RoomTypeName\" : \"RoomTypeName\", \"RoomExtensionNo\" : \"RoomExtensionNo\", \"RoomStatus\" : 5, \"RoomId\" : 0, \"TotalBed\" : 6, \"RoomCapacity\" : 1 }, { \"RoomStatusName\" : \"RoomStatusName\", \"RoomNo\" : \"RoomNo\", \"RoomTypeName\" : \"RoomTypeName\", \"RoomExtensionNo\" : \"RoomExtensionNo\", \"RoomStatus\" : 5, \"RoomId\" : 0, \"TotalBed\" : 6, \"RoomCapacity\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllService
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllServiceGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = Service.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Service.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = Service.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllService",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<Service>> apiResortGetAllServiceGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Sgst\" : 5.962133916683182, \"IsDeleted\" : true, \"ServiceName\" : \"ServiceName\", \"Cgst\" : 1.4658129805029452, \"TaxableAmount\" : 6.027456183070403, \"IsActive\" : true, \"ServiceId\" : 0 }, { \"Sgst\" : 5.962133916683182, \"IsDeleted\" : true, \"ServiceName\" : \"ServiceName\", \"Cgst\" : 1.4658129805029452, \"TaxableAmount\" : 6.027456183070403, \"IsActive\" : true, \"ServiceId\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllUser
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllUserGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = UserMaster.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserMaster.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = UserMaster.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllUser",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<UserMaster>> apiResortGetAllUserGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Role\" : \"Role\", \"IsDeleted\" : true, \"UserName\" : \"UserName\", \"UserId\" : 0, \"Password\" : \"Password\" }, { \"Role\" : \"Role\", \"IsDeleted\" : true, \"UserName\" : \"UserName\", \"UserId\" : 0, \"Password\" : \"Password\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/GetAllVisit
     *
     * @param visitSearch  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllVisitPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WaterCustomerView.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WaterCustomerView.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WaterCustomerView.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/GetAllVisit",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<List<WaterCustomerView>> apiResortGetAllVisitPost(
        @Parameter(name = "VisitSearch", description = "") @Valid @RequestBody(required = false) VisitSearch visitSearch
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"NoOfMembers\" : 1, \"Childrens\" : 2, \"Service\" : \"Service\", \"IsDone\" : true, \"CustomerId\" : 6, \"TotalAmount\" : 5.962133916683182, \"VisitId\" : 0, \"TicketDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Mobile\" : \"Mobile\", \"Name\" : \"Name\", \"confirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"BookingUId\" : \"BookingUId\", \"isConfirm\" : \"isConfirm\", \"ChildRate\" : 9, \"TicketNo\" : \"TicketNo\", \"AdultRate\" : 7, \"Adults\" : 5, \"user\" : \"user\" }, { \"NoOfMembers\" : 1, \"Childrens\" : 2, \"Service\" : \"Service\", \"IsDone\" : true, \"CustomerId\" : 6, \"TotalAmount\" : 5.962133916683182, \"VisitId\" : 0, \"TicketDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Mobile\" : \"Mobile\", \"Name\" : \"Name\", \"confirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"BookingUId\" : \"BookingUId\", \"isConfirm\" : \"isConfirm\", \"ChildRate\" : 9, \"TicketNo\" : \"TicketNo\", \"AdultRate\" : 7, \"Adults\" : 5, \"user\" : \"user\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetAllWeddingPackages
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetAllWeddingPackagesGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WeddingPackage.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeddingPackage.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WeddingPackage.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetAllWeddingPackages",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WeddingPackage>> apiResortGetAllWeddingPackagesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"PerPersonCost\" : 5.962133916683182, \"IsDeleted\" : true, \"WeddingPackageId\" : 0, \"WithFoodCost\" : 6.027456183070403, \"WithoutFoodCost\" : 1.4658129805029452, \"Description\" : \"Description\", \"PackageName\" : \"PackageName\", \"RangeOfPeoples\" : \"RangeOfPeoples\", \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"PerPersonCost\" : 5.962133916683182, \"IsDeleted\" : true, \"WeddingPackageId\" : 0, \"WithFoodCost\" : 6.027456183070403, \"WithoutFoodCost\" : 1.4658129805029452, \"Description\" : \"Description\", \"PackageName\" : \"PackageName\", \"RangeOfPeoples\" : \"RangeOfPeoples\", \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/GetBookingByBookingId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetBookingByBookingIdPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/GetBookingByBookingId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortGetBookingByBookingIdPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetBooking
     *
     * @param month  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetBookingGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = RoomAllotmentList.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RoomAllotmentList.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = RoomAllotmentList.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetBooking",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<RoomAllotmentList>> apiResortGetBookingGet(
        @Parameter(name = "month", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "month", required = false) Integer month
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"BookingDate\" : \"2000-01-23T04:56:07.000+00:00\", \"RoomNo\" : \"RoomNo\", \"BookingDetails\" : \"BookingDetails\", \"AllotId\" : 6, \"BookingId\" : 0, \"MonthDay\" : 5, \"RoomId\" : 1, \"CustomerId\" : 5, \"CustomerName\" : \"CustomerName\", \"IsConfirmed\" : true }, { \"BookingDate\" : \"2000-01-23T04:56:07.000+00:00\", \"RoomNo\" : \"RoomNo\", \"BookingDetails\" : \"BookingDetails\", \"AllotId\" : 6, \"BookingId\" : 0, \"MonthDay\" : 5, \"RoomId\" : 1, \"CustomerId\" : 5, \"CustomerName\" : \"CustomerName\", \"IsConfirmed\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetDasboardData
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetDasboardDataGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = DashModel.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DashModel.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = DashModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetDasboardData",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<DashModel>> apiResortGetDasboardDataGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"TotEnquiry\" : 0, \"TotCustomer\" : 1, \"TotResortBooking\" : 6, \"TotWeddingBooking\" : 2, \"TotRoom\" : 5, \"TotRoomBooking\" : 5 }, { \"TotEnquiry\" : 0, \"TotCustomer\" : 1, \"TotResortBooking\" : 6, \"TotWeddingBooking\" : 2, \"TotRoom\" : 5, \"TotRoomBooking\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/getDateWiseVisit
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetDateWiseVisitGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = DataGraph.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DataGraph.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = DataGraph.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/getDateWiseVisit",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<DataGraph>> apiResortGetDateWiseVisitGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"value\" : 0 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"value\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/GetEnquiryByEnquiryId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetEnquiryByEnquiryIdPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/GetEnquiryByEnquiryId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortGetEnquiryByEnquiryIdPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetEnquiryByUserId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetEnquiryByUserIdGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetEnquiryByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<EnquiryView>> apiResortGetEnquiryByUserIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 }, { \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetFoodItemList
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetFoodItemListGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = FoodItemList.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FoodItemList.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = FoodItemList.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetFoodItemList",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<FoodItemList>> apiResortGetFoodItemListGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"FoodItemTypeId\" : 5, \"FullPrice\" : 6.027456183070403, \"IsDeleted\" : true, \"IsVeg\" : true, \"IsHalf\" : true, \"IsAvailable\" : true, \"ItemName\" : \"ItemName\", \"HalfPrice\" : 1.4658129805029452, \"FoodItemName\" : \"FoodItemName\", \"ItemId\" : 0 }, { \"FoodItemTypeId\" : 5, \"FullPrice\" : 6.027456183070403, \"IsDeleted\" : true, \"IsVeg\" : true, \"IsHalf\" : true, \"IsAvailable\" : true, \"ItemName\" : \"ItemName\", \"HalfPrice\" : 1.4658129805029452, \"FoodItemName\" : \"FoodItemName\", \"ItemId\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetMasterByStatus
     *
     * @param master  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetMasterByStatusGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = StatusMasterViewModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetMasterByStatus",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<StatusMasterViewModel>> apiResortGetMasterByStatusGet(
        @Parameter(name = "master", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "master", required = false) String master
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Status\" : \"Status\", \"StatusId\" : 0, \"StatusFor\" : \"StatusFor\" }, { \"Status\" : \"Status\", \"StatusId\" : 0, \"StatusFor\" : \"StatusFor\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetOpenOrderList
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetOpenOrderListGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetOpenOrderList",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortGetOpenOrderListGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetOrder
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetOrderGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = FoodOrderOpen.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodOrderOpen.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = FoodOrderOpen.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetOrder",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<FoodOrderOpen> apiResortGetOrderGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"MobileNo\" : \"MobileNo\", \"Message\" : \"Message\", \"OrderNo\" : 5, \"OrderId\" : 0, \"Name\" : \"Name\", \"OrderDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Result\" : true, \"OrderStatus\" : \"OrderStatus\", \"OrderUniqeId\" : \"OrderUniqeId\", \"FoodOrderItems\" : [ { \"Rate\" : 3.616076749251911, \"Total\" : 4.145608029883936, \"Quantity\" : 9, \"Naration\" : \"Naration\", \"OrderId\" : 2, \"ItemId\" : 7, \"OrderItemId\" : 2, \"Name\" : \"Name\" }, { \"Rate\" : 3.616076749251911, \"Total\" : 4.145608029883936, \"Quantity\" : 9, \"Naration\" : \"Naration\", \"OrderId\" : 2, \"ItemId\" : 7, \"OrderItemId\" : 2, \"Name\" : \"Name\" } ], \"UserId\" : 5, \"BookingId\" : 1, \"OrderTotal\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetOrderList
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetOrderListGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = FoodOrder.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FoodOrder.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = FoodOrder.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetOrderList",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<FoodOrder>> apiResortGetOrderListGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"MobileNo\" : \"MobileNo\", \"OrderStatus\" : \"OrderStatus\", \"OrderUniqeId\" : \"OrderUniqeId\", \"UserId\" : 5, \"BookingId\" : 5, \"OrderNo\" : 2, \"OrderId\" : 0, \"OrderTotal\" : 1.4658129805029452, \"Name\" : \"Name\", \"ServiceId\" : 6, \"OrderDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"MobileNo\" : \"MobileNo\", \"OrderStatus\" : \"OrderStatus\", \"OrderUniqeId\" : \"OrderUniqeId\", \"UserId\" : 5, \"BookingId\" : 5, \"OrderNo\" : 2, \"OrderId\" : 0, \"OrderTotal\" : 1.4658129805029452, \"Name\" : \"Name\", \"ServiceId\" : 6, \"OrderDate\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetOrderStatus
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetOrderStatusGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetOrderStatus",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortGetOrderStatusGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetRoomById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetRoomByIdGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = RoomViewModel.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoomViewModel.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = RoomViewModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetRoomById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<RoomViewModel> apiResortGetRoomByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"RoomTypeId\" : 6, \"RoomNo\" : \"RoomNo\", \"RoomExtensionNo\" : \"RoomExtensionNo\", \"RoomStatus\" : 5, \"Message\" : \"Message\", \"RoomId\" : 0, \"TotalBed\" : 1, \"RoomCapacity\" : 5, \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetRoomType
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetRoomTypeGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = RoomTypeMaster.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RoomTypeMaster.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = RoomTypeMaster.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetRoomType",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<RoomTypeMaster>> apiResortGetRoomTypeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"RoomTypeId\" : 0, \"RoomTypeName\" : \"RoomTypeName\", \"RoomMaxCapacity\" : 6 }, { \"RoomTypeId\" : 0, \"RoomTypeName\" : \"RoomTypeName\", \"RoomMaxCapacity\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetSingleVisitByVisitId
     *
     * @param visitId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetSingleVisitByVisitIdGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WaterCustomer.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WaterCustomer.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WaterCustomer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetSingleVisitByVisitId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<WaterCustomer> apiResortGetSingleVisitByVisitIdGet(
        @Parameter(name = "visitId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "visitId", required = false) Integer visitId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Discount\" : 7.457744773683766, \"NoOfMembers\" : 2, \"CreateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Reason\" : \"Reason\", \"Name\" : \"Name\", \"ServiceId\" : 9, \"BookingToDate\" : \"2000-01-23T04:56:07.000+00:00\", \"PaymentBy\" : \"PaymentBy\", \"BookingUId\" : \"BookingUId\", \"isConfirm\" : \"isConfirm\", \"TicketNo\" : \"TicketNo\", \"Remaining\" : 2.027123023002322, \"EmailId\" : \"EmailId\", \"Advance\" : 3.616076749251911, \"Reference\" : 5, \"Rate\" : 1, \"Childrens\" : 7, \"RemainingPaidAmt\" : 1.4658129805029452, \"IsAdvance\" : true, \"IsDone\" : true, \"CustomerId\" : 6, \"City\" : \"City\", \"TotalAmount\" : 7.061401241503109, \"VisitId\" : 0, \"TicketDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Mobile\" : \"Mobile\", \"confirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"UserId\" : 5, \"IsDelete\" : true, \"ChildRate\" : 1, \"AdultRate\" : 1, \"PaymentDetails\" : \"PaymentDetails\", \"Adults\" : 4, \"PackageId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/getTodayDashboardCount
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetTodayDashboardCountGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = DashModelToday.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DashModelToday.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = DashModelToday.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/getTodayDashboardCount",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<DashModelToday>> apiResortGetTodayDashboardCountGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"TodayEnquiry\" : 0, \"TodayWVisit\" : 6, \"TodayVisit\" : 5, \"TodayRVisit\" : 1, \"TodayFoodOrder\" : 2, \"TodayWedding\" : 5 }, { \"TodayEnquiry\" : 0, \"TodayWVisit\" : 6, \"TodayVisit\" : 5, \"TodayRVisit\" : 1, \"TodayFoodOrder\" : 2, \"TodayWedding\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetTodaysVisit
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetTodaysVisitGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WaterCustomerView.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WaterCustomerView.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WaterCustomerView.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetTodaysVisit",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WaterCustomerView>> apiResortGetTodaysVisitGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"NoOfMembers\" : 1, \"Childrens\" : 2, \"Service\" : \"Service\", \"IsDone\" : true, \"CustomerId\" : 6, \"TotalAmount\" : 5.962133916683182, \"VisitId\" : 0, \"TicketDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Mobile\" : \"Mobile\", \"Name\" : \"Name\", \"confirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"BookingUId\" : \"BookingUId\", \"isConfirm\" : \"isConfirm\", \"ChildRate\" : 9, \"TicketNo\" : \"TicketNo\", \"AdultRate\" : 7, \"Adults\" : 5, \"user\" : \"user\" }, { \"NoOfMembers\" : 1, \"Childrens\" : 2, \"Service\" : \"Service\", \"IsDone\" : true, \"CustomerId\" : 6, \"TotalAmount\" : 5.962133916683182, \"VisitId\" : 0, \"TicketDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Mobile\" : \"Mobile\", \"Name\" : \"Name\", \"confirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"BookingUId\" : \"BookingUId\", \"isConfirm\" : \"isConfirm\", \"ChildRate\" : 9, \"TicketNo\" : \"TicketNo\", \"AdultRate\" : 7, \"Adults\" : 5, \"user\" : \"user\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetTopEnquries
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetTopEnquriesGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = EnquiryView.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetTopEnquries",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<EnquiryView>> apiResortGetTopEnquriesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 }, { \"EnquiryDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EmailId\" : \"EmailId\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"FeedBack\" : \"FeedBack\", \"Reference\" : \"Reference\", \"EnquiryId\" : 0, \"CustomerId\" : 5, \"Subject\" : \"Subject\", \"Name\" : \"Name\", \"Result\" : true, \"OtherRef\" : \"OtherRef\", \"FollowUpDate\" : \"2000-01-23T04:56:07.000+00:00\", \"EnquiryStatus\" : \"EnquiryStatus\", \"ContactNo\" : \"ContactNo\", \"Details\" : \"Details\", \"ReferenceId\" : 6, \"AltContactNo\" : \"AltContactNo\", \"UserId\" : 5, \"StatusId\" : 1, \"MasterId\" : 2 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetVisit
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetVisitGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetVisit",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiResortGetVisitGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetWeddingById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetWeddingByIdGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = WeddingMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeddingMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = WeddingMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetWeddingById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<WeddingMasterView> apiResortGetWeddingByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.637376656633329, \"ExtraWeddingDetails\" : [ { \"DetailId\" : 7, \"Requirment\" : \"Requirment\", \"Rate\" : 5.025004791520295, \"NoOfPax\" : 4, \"Total\" : 9.965781217890562, \"WeddingId\" : 9, \"ServiceId\" : 1 }, { \"DetailId\" : 7, \"Requirment\" : \"Requirment\", \"Rate\" : 5.025004791520295, \"NoOfPax\" : 4, \"Total\" : 9.965781217890562, \"WeddingId\" : 9, \"ServiceId\" : 1 } ], \"Discount\" : 3.616076749251911, \"Message\" : \"Message\", \"ConfirmDate\" : \"2000-01-23T04:56:07.000+00:00\", \"WeddingId\" : 6, \"Reason\" : \"Reason\", \"Result\" : true, \"SGST\" : 7.061401241503109, \"WeddingPackageId\" : 2, \"WeddingDetails\" : [ { \"DetailId\" : 4, \"Requirment\" : \"Requirment\", \"Rate\" : 1.0246457001441578, \"NoOfPax\" : 1, \"Total\" : 1.4894159098541704, \"WeddingId\" : 6, \"ServiceId\" : 7 }, { \"DetailId\" : 4, \"Requirment\" : \"Requirment\", \"Rate\" : 1.0246457001441578, \"NoOfPax\" : 1, \"Total\" : 1.4894159098541704, \"WeddingId\" : 6, \"ServiceId\" : 7 } ], \"BookingUId\" : \"BookingUId\", \"CGST\" : 9.301444243932576, \"CustomerName\" : \"CustomerName\", \"ArrivalTime\" : \"ArrivalTime\", \"LastUpdatedBy\" : 0, \"IsDeleted\" : true, \"Venue\" : \"Venue\", \"CustomerId\" : 1, \"TotalAmount\" : 5.962133916683182, \"RelieveTime\" : \"RelieveTime\", \"IsConfermed\" : \"IsConfermed\", \"Details\" : \"Details\", \"UserId\" : 2, \"IsAlacarte\" : true, \"SContact\" : \"SContact\", \"PContact\" : \"PContact\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetWeddingByMonth
     *
     * @param month  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetWeddingByMonthGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WeddingBookingList.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeddingBookingList.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WeddingBookingList.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetWeddingByMonth",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WeddingBookingList>> apiResortGetWeddingByMonthGet(
        @Parameter(name = "month", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "month", required = false) Integer month
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Details\" : \"Details\", \"UserName\" : \"UserName\", \"BookingUId\" : \"BookingUId\", \"Venue\" : \"Venue\", \"WeddingId\" : 6, \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"MonthDay\" : 0, \"TotalAmount\" : 1.4658129805029452, \"CustomerName\" : \"CustomerName\", \"PContact\" : \"PContact\" }, { \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Details\" : \"Details\", \"UserName\" : \"UserName\", \"BookingUId\" : \"BookingUId\", \"Venue\" : \"Venue\", \"WeddingId\" : 6, \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"MonthDay\" : 0, \"TotalAmount\" : 1.4658129805029452, \"CustomerName\" : \"CustomerName\", \"PContact\" : \"PContact\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetWeddingFoodItems
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetWeddingFoodItemsGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WeddingFoodItemList.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeddingFoodItemList.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WeddingFoodItemList.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetWeddingFoodItems",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WeddingFoodItemList>> apiResortGetWeddingFoodItemsGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Details\" : \"Details\", \"DetailId\" : 2, \"ServiceName\" : \"ServiceName\", \"NoOfPax\" : 5, \"WeddingId\" : 5, \"FoodItemId\" : 6, \"FoodItemName\" : \"FoodItemName\", \"WeddingFoodItemId\" : 0, \"WeddingServiceId\" : 7, \"RateGiven\" : 1.4658129805029452 }, { \"Details\" : \"Details\", \"DetailId\" : 2, \"ServiceName\" : \"ServiceName\", \"NoOfPax\" : 5, \"WeddingId\" : 5, \"FoodItemId\" : 6, \"FoodItemName\" : \"FoodItemName\", \"WeddingFoodItemId\" : 0, \"WeddingServiceId\" : 7, \"RateGiven\" : 1.4658129805029452 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/Getwedding/{id}
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetweddingIdGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WeddingMasterList.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeddingMasterList.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WeddingMasterList.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/Getwedding/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WeddingMasterList>> apiResortGetweddingIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.637376656633329, \"PackageName\" : \"PackageName\", \"WeddingId\" : 6, \"CustomerId\" : 1, \"TotalAmount\" : 5.962133916683182, \"IsConfermed\" : \"IsConfermed\", \"WeddingPackageId\" : 0, \"BookingUId\" : \"BookingUId\", \"IsAlacarte\" : true, \"CustomerName\" : \"CustomerName\", \"PContact\" : \"PContact\", \"ArrivalTime\" : \"ArrivalTime\" }, { \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.637376656633329, \"PackageName\" : \"PackageName\", \"WeddingId\" : 6, \"CustomerId\" : 1, \"TotalAmount\" : 5.962133916683182, \"IsConfermed\" : \"IsConfermed\", \"WeddingPackageId\" : 0, \"BookingUId\" : \"BookingUId\", \"IsAlacarte\" : true, \"CustomerName\" : \"CustomerName\", \"PContact\" : \"PContact\", \"ArrivalTime\" : \"ArrivalTime\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetweddingService
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetweddingServiceGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WeddingService.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeddingService.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WeddingService.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetweddingService",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WeddingService>> apiResortGetweddingServiceGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"IsDeleted\" : true, \"Rate\" : 6.027456183070403, \"IsActive\" : true, \"ServiceType\" : \"ServiceType\", \"IsPax\" : true, \"OrderNo\" : 1, \"ServiceId\" : 0, \"Name\" : \"Name\" }, { \"IsDeleted\" : true, \"Rate\" : 6.027456183070403, \"IsActive\" : true, \"ServiceType\" : \"ServiceType\", \"IsPax\" : true, \"OrderNo\" : 1, \"ServiceId\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/GetweddingWithPackage
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortGetweddingWithPackageGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WeddingMasterList.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeddingMasterList.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WeddingMasterList.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/GetweddingWithPackage",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WeddingMasterList>> apiResortGetweddingWithPackageGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.637376656633329, \"PackageName\" : \"PackageName\", \"WeddingId\" : 6, \"CustomerId\" : 1, \"TotalAmount\" : 5.962133916683182, \"IsConfermed\" : \"IsConfermed\", \"WeddingPackageId\" : 0, \"BookingUId\" : \"BookingUId\", \"IsAlacarte\" : true, \"CustomerName\" : \"CustomerName\", \"PContact\" : \"PContact\", \"ArrivalTime\" : \"ArrivalTime\" }, { \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.637376656633329, \"PackageName\" : \"PackageName\", \"WeddingId\" : 6, \"CustomerId\" : 1, \"TotalAmount\" : 5.962133916683182, \"IsConfermed\" : \"IsConfermed\", \"WeddingPackageId\" : 0, \"BookingUId\" : \"BookingUId\", \"IsAlacarte\" : true, \"CustomerName\" : \"CustomerName\", \"PContact\" : \"PContact\", \"ArrivalTime\" : \"ArrivalTime\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/Login
     *
     * @param userMasterView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortLoginPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = UserMasterView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserMasterView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = UserMasterView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<UserMasterView> apiResortLoginPost(
        @Parameter(name = "UserMasterView", description = "") @Valid @RequestBody(required = false) UserMasterView userMasterView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Role\" : \"Role\", \"UserName\" : \"UserName\", \"Message\" : \"Message\", \"UserId\" : 0, \"Password\" : \"Password\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Resort/UpddateOrder
     *
     * @param foodOrderView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortUpddateOrderPost",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = FoodOrderView.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodOrderView.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = FoodOrderView.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Resort/UpddateOrder",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<FoodOrderView> apiResortUpddateOrderPost(
        @Parameter(name = "FoodOrderView", description = "") @Valid @RequestBody(required = false) FoodOrderView foodOrderView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"MobileNo\" : \"MobileNo\", \"Message\" : \"Message\", \"OrderNo\" : 5, \"OrderId\" : 0, \"Name\" : \"Name\", \"OrderDate\" : \"2000-01-23T04:56:07.000+00:00\", \"Result\" : true, \"OrderStatus\" : \"OrderStatus\", \"OrderUniqeId\" : \"OrderUniqeId\", \"FoodOrderItems\" : [ { \"Rate\" : 3.616076749251911, \"Total\" : 4.145608029883936, \"Quantity\" : 9, \"Naration\" : \"Naration\", \"OrderId\" : 2, \"ItemId\" : 7, \"OrderItemId\" : 2 }, { \"Rate\" : 3.616076749251911, \"Total\" : 4.145608029883936, \"Quantity\" : 9, \"Naration\" : \"Naration\", \"OrderId\" : 2, \"ItemId\" : 7, \"OrderItemId\" : 2 } ], \"UserId\" : 5, \"BookingId\" : 1, \"OrderTotal\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Resort/WeddingWithPackage
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiResortWeddingWithPackageGet",
        tags = { "Resort" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = WeddingPackageMasterList.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeddingPackageMasterList.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = WeddingPackageMasterList.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Resort/WeddingWithPackage",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<WeddingPackageMasterList>> apiResortWeddingWithPackageGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"LastUpdatedBy\" : 2, \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.962133916683182, \"IsDeleted\" : true, \"UserName\" : \"UserName\", \"Discount\" : 3.616076749251911, \"Venue\" : \"Venue\", \"WeddingPackageName\" : \"WeddingPackageName\", \"WeddingId\" : 0, \"CustomerId\" : 6, \"TotalAmount\" : 1.4658129805029452, \"LastUpdatedUser\" : \"LastUpdatedUser\", \"RelieveTime\" : \"RelieveTime\", \"IsConfermed\" : \"IsConfermed\", \"Details\" : \"Details\", \"SGST\" : 7.061401241503109, \"BookingUId\" : \"BookingUId\", \"UserId\" : 5, \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"CGST\" : 9.301444243932576, \"CustomerName\" : \"CustomerName\", \"SContact\" : \"SContact\", \"PContact\" : \"PContact\", \"ArrivalTime\" : \"ArrivalTime\" }, { \"LastUpdatedBy\" : 2, \"EventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"AdvanceAmount\" : 5.962133916683182, \"IsDeleted\" : true, \"UserName\" : \"UserName\", \"Discount\" : 3.616076749251911, \"Venue\" : \"Venue\", \"WeddingPackageName\" : \"WeddingPackageName\", \"WeddingId\" : 0, \"CustomerId\" : 6, \"TotalAmount\" : 1.4658129805029452, \"LastUpdatedUser\" : \"LastUpdatedUser\", \"RelieveTime\" : \"RelieveTime\", \"IsConfermed\" : \"IsConfermed\", \"Details\" : \"Details\", \"SGST\" : 7.061401241503109, \"BookingUId\" : \"BookingUId\", \"UserId\" : 5, \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"CGST\" : 9.301444243932576, \"CustomerName\" : \"CustomerName\", \"SContact\" : \"SContact\", \"PContact\" : \"PContact\", \"ArrivalTime\" : \"ArrivalTime\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/AddLeave
     *
     * @param reqLeaf  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsAddLeavePost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/AddLeave",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsAddLeavePost(
        @Parameter(name = "ReqLeaf", description = "") @Valid @RequestBody(required = false) ReqLeaf reqLeaf
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/ApproveLeave
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsApproveLeaveGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/ApproveLeave",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsApproveLeaveGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/AssignRequest
     *
     * @param assignRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsAssignRequestPost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/AssignRequest",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsAssignRequestPost(
        @Parameter(name = "AssignRequest", description = "") @Valid @RequestBody(required = false) AssignRequest assignRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/closeTicket
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsCloseTicketPost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/closeTicket",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsCloseTicketPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/CreateDepartment
     *
     * @param reqDepartment  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsCreateDepartmentPost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/CreateDepartment",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsCreateDepartmentPost(
        @Parameter(name = "ReqDepartment", description = "") @Valid @RequestBody(required = false) ReqDepartment reqDepartment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/CreateEmployee
     *
     * @param reqEmployee  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsCreateEmployeePost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/CreateEmployee",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsCreateEmployeePost(
        @Parameter(name = "ReqEmployee", description = "") @Valid @RequestBody(required = false) ReqEmployee reqEmployee
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/CreateNewTicket
     *
     * @param newTicket  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsCreateNewTicketPost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/CreateNewTicket",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsCreateNewTicketPost(
        @Parameter(name = "NewTicket", description = "") @Valid @RequestBody(required = false) NewTicket newTicket
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Tickets/DeleteDepartment
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsDeleteDepartmentDelete",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Tickets/DeleteDepartment",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsDeleteDepartmentDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Tickets/DeleteEmployee
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsDeleteEmployeeDelete",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Tickets/DeleteEmployee",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsDeleteEmployeeDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Tickets/DeleteTicket
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsDeleteTicketDelete",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Tickets/DeleteTicket",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsDeleteTicketDelete(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/getAdminEmployeeDashByEmpId
     *
     * @param empId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetAdminEmployeeDashByEmpIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/getAdminEmployeeDashByEmpId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetAdminEmployeeDashByEmpIdGet(
        @Parameter(name = "empId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "empId", required = false) Integer empId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetAllLeavesByEmployeeId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetAllLeavesByEmployeeIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetAllLeavesByEmployeeId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetAllLeavesByEmployeeIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetAllLeaves
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetAllLeavesGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetAllLeaves",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetAllLeavesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetAllRoles
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetAllRolesGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetAllRoles",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetAllRolesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetAllTicketsByDeptHead
     *
     * @param deptHeadEmpId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetAllTicketsByDeptHeadGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetAllTicketsByDeptHead",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetAllTicketsByDeptHeadGet(
        @Parameter(name = "deptHeadEmpId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deptHeadEmpId", required = false) Integer deptHeadEmpId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetAllTickets
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetAllTicketsGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetAllTickets",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetAllTicketsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetAssignedTicketsByEmpId
     *
     * @param empId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetAssignedTicketsByEmpIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetAssignedTicketsByEmpId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetAssignedTicketsByEmpIdGet(
        @Parameter(name = "empId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "empId", required = false) Integer empId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetDepartments
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetDepartmentsGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetDepartments",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetDepartmentsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetDeptHeadDashboardByDeptHead
     *
     * @param deptHeadEmpId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetDeptHeadDashboardByDeptHeadGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetDeptHeadDashboardByDeptHead",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetDeptHeadDashboardByDeptHeadGet(
        @Parameter(name = "deptHeadEmpId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deptHeadEmpId", required = false) Integer deptHeadEmpId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetEmployeeById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetEmployeeByIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetEmployeeById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetEmployeeByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/getEmployeeDashByEmpId
     *
     * @param empId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetEmployeeDashByEmpIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/getEmployeeDashByEmpId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetEmployeeDashByEmpIdGet(
        @Parameter(name = "empId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "empId", required = false) Integer empId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetEmployeesByDeptId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetEmployeesByDeptIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetEmployeesByDeptId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetEmployeesByDeptIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetEmployees
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetEmployeesGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetEmployees",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetEmployeesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetLeavesForApprovalBySuperwiserId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetLeavesForApprovalBySuperwiserIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetLeavesForApprovalBySuperwiserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetLeavesForApprovalBySuperwiserIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/getNewTickets
     *
     * @param deptHeadEmpId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetNewTicketsGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/getNewTickets",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetNewTicketsGet(
        @Parameter(name = "deptHeadEmpId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deptHeadEmpId", required = false) Integer deptHeadEmpId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/GetRequestByFilter
     *
     * @param requestFilter  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetRequestByFilterPost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/GetRequestByFilter",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetRequestByFilterPost(
        @Parameter(name = "RequestFilter", description = "") @Valid @RequestBody(required = false) RequestFilter requestFilter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetSuperAdminDashboard
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetSuperAdminDashboardGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetSuperAdminDashboard",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetSuperAdminDashboardGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetTicketById
     *
     * @param ticketId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetTicketByIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetTicketById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetTicketByIdGet(
        @Parameter(name = "ticketId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ticketId", required = false) Integer ticketId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/GetTicketsCreatedByEmpId
     *
     * @param empId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsGetTicketsCreatedByEmpIdGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/GetTicketsCreatedByEmpId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsGetTicketsCreatedByEmpIdGet(
        @Parameter(name = "empId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "empId", required = false) Integer empId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/Login
     *
     * @param reLogin  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsLoginPost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsLoginPost(
        @Parameter(name = "ReLogin", description = "") @Valid @RequestBody(required = false) ReLogin reLogin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Tickets/RejectLeave
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsRejectLeaveGet",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Tickets/RejectLeave",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsRejectLeaveGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Tickets/startTicket
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsStartTicketPost",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Tickets/startTicket",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsStartTicketPost(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Tickets/UpdateDepartment
     *
     * @param reqDepartment  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsUpdateDepartmentPut",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Tickets/UpdateDepartment",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsUpdateDepartmentPut(
        @Parameter(name = "ReqDepartment", description = "") @Valid @RequestBody(required = false) ReqDepartment reqDepartment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Tickets/UpdateEmployee
     *
     * @param reqEmployee  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTicketsUpdateEmployeePut",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Tickets/UpdateEmployee",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTicketsUpdateEmployeePut(
        @Parameter(name = "ReqEmployee", description = "") @Valid @RequestBody(required = false) ReqEmployee reqEmployee
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/TrainApp/AddBulkTrainStations
     *
     * @param trainAppStation  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppAddBulkTrainStationsPost",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/TrainApp/AddBulkTrainStations",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppAddBulkTrainStationsPost(
        @Parameter(name = "TrainAppStation", description = "") @Valid @RequestBody(required = false) List<@Valid TrainAppStation> trainAppStation
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/TrainApp/AddNewTrain
     *
     * @param trainAppTrain  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppAddNewTrainPost",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/TrainApp/AddNewTrain",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppAddNewTrainPost(
        @Parameter(name = "TrainAppTrain", description = "") @Valid @RequestBody(required = false) TrainAppTrain trainAppTrain
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/TrainApp/AddUpdatePassengers
     *
     * @param trainAppPassenger  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppAddUpdatePassengersPost",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/TrainApp/AddUpdatePassengers",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppAddUpdatePassengersPost(
        @Parameter(name = "TrainAppPassenger", description = "") @Valid @RequestBody(required = false) TrainAppPassenger trainAppPassenger
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/TrainApp/BookTrain
     *
     * @param trainAppBookingView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppBookTrainPost",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/TrainApp/BookTrain",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppBookTrainPost(
        @Parameter(name = "TrainAppBookingView", description = "") @Valid @RequestBody(required = false) TrainAppBookingView trainAppBookingView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/TrainApp/CancelBookingByBookingId
     *
     * @param bookingId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppCancelBookingByBookingIdDelete",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/TrainApp/CancelBookingByBookingId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppCancelBookingByBookingIdDelete(
        @Parameter(name = "bookingId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookingId", required = false) Integer bookingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/TrainApp/DeletePassengerByPassengerId
     *
     * @param passengerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppDeletePassengerByPassengerIdDelete",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/TrainApp/DeletePassengerByPassengerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppDeletePassengerByPassengerIdDelete(
        @Parameter(name = "passengerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "passengerId", required = false) Integer passengerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/TrainApp/DeleteStationByStationId
     *
     * @param stationId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppDeleteStationByStationIdDelete",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/TrainApp/DeleteStationByStationId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppDeleteStationByStationIdDelete(
        @Parameter(name = "stationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "stationId", required = false) Integer stationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/TrainApp/DeleteTrainByTrainId
     *
     * @param trainId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppDeleteTrainByTrainIdDelete",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/TrainApp/DeleteTrainByTrainId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppDeleteTrainByTrainIdDelete(
        @Parameter(name = "trainId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "trainId", required = false) Integer trainId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/TrainApp/GetAllPassengers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppGetAllPassengersGet",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/TrainApp/GetAllPassengers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppGetAllPassengersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/TrainApp/GetAllStations
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppGetAllStationsGet",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/TrainApp/GetAllStations",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppGetAllStationsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/TrainApp/GetAllTrainsBookingsPassengerList
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppGetAllTrainsBookingsPassengerListGet",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/TrainApp/GetAllTrainsBookingsPassengerList",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppGetAllTrainsBookingsPassengerListGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/TrainApp/GetAllTrains
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppGetAllTrainsGet",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/TrainApp/GetAllTrains",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppGetAllTrainsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/TrainApp/GetBookingByPassengerId
     *
     * @param passengerid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppGetBookingByPassengerIdGet",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/TrainApp/GetBookingByPassengerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppGetBookingByPassengerIdGet(
        @Parameter(name = "passengerid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "passengerid", required = false) Integer passengerid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/TrainApp/GetTrainBookingPassengerListByTrainId
     *
     * @param trainid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppGetTrainBookingPassengerListByTrainIdGet",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/TrainApp/GetTrainBookingPassengerListByTrainId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppGetTrainBookingPassengerListByTrainIdGet(
        @Parameter(name = "trainid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "trainid", required = false) Integer trainid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/TrainApp/GetTrainBookings
     *
     * @param departureStationId  (optional)
     * @param arrivalStationId  (optional)
     * @param departureDate  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppGetTrainBookingsGet",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/TrainApp/GetTrainBookings",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppGetTrainBookingsGet(
        @Parameter(name = "departureStationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureStationId", required = false) Integer departureStationId,
        @Parameter(name = "arrivalStationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalStationId", required = false) Integer arrivalStationId,
        @Parameter(name = "departureDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/TrainApp/GetTrainsBetweenStations
     *
     * @param departureStationId  (optional)
     * @param arrivalStationId  (optional)
     * @param departureDate  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppGetTrainsBetweenStationsGet",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/TrainApp/GetTrainsBetweenStations",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppGetTrainsBetweenStationsGet(
        @Parameter(name = "departureStationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureStationId", required = false) Integer departureStationId,
        @Parameter(name = "arrivalStationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalStationId", required = false) Integer arrivalStationId,
        @Parameter(name = "departureDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/TrainApp/Login
     *
     * @param trainLogin  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTrainAppLoginPost",
        tags = { "TrainApp" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/TrainApp/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiTrainAppLoginPost(
        @Parameter(name = "TrainLogin", description = "") @Valid @RequestBody(required = false) TrainLogin trainLogin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/User/CreateNewBooking
     *
     * @param bookingId  (optional)
     * @param name  (optional)
     * @param city  (optional)
     * @param mobileNo  (optional)
     * @param state  (optional)
     * @param altMobNo  (optional)
     * @param dateOfStay  (optional)
     * @param noOfMembers  (optional)
     * @param isConfirmed  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserCreateNewBookingPost",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/User/CreateNewBooking",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserCreateNewBookingPost(
        @Parameter(name = "BookingId", description = "") @Valid @RequestParam(value = "BookingId", required = false) Integer bookingId,
        @Parameter(name = "Name", description = "") @Valid @RequestParam(value = "Name", required = false) String name,
        @Parameter(name = "City", description = "") @Valid @RequestParam(value = "City", required = false) String city,
        @Parameter(name = "MobileNo", description = "") @Valid @RequestParam(value = "MobileNo", required = false) String mobileNo,
        @Parameter(name = "State", description = "") @Valid @RequestParam(value = "State", required = false) String state,
        @Parameter(name = "AltMobNo", description = "") @Valid @RequestParam(value = "AltMobNo", required = false) String altMobNo,
        @Parameter(name = "DateOfStay", description = "") @Valid @RequestParam(value = "DateOfStay", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateOfStay,
        @Parameter(name = "NoOfMembers", description = "") @Valid @RequestParam(value = "NoOfMembers", required = false) Integer noOfMembers,
        @Parameter(name = "IsConfirmed", description = "") @Valid @RequestParam(value = "IsConfirmed", required = false) Boolean isConfirmed
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/User/CreateNewUser
     *
     * @param youTubeUserBasicView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserCreateNewUserPost",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/User/CreateNewUser",
        produces = { "application/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserCreateNewUserPost(
        @Parameter(name = "YouTubeUserBasicView", description = "") @Valid @RequestBody(required = false) YouTubeUserBasicView youTubeUserBasicView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/User/DeleteBookingById
     *
     * @param bookingid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserDeleteBookingByIdDelete",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/User/DeleteBookingById",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserDeleteBookingByIdDelete(
        @Parameter(name = "bookingid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookingid", required = false) Integer bookingid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/User/DeleteUserById
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserDeleteUserByIdDelete",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/User/DeleteUserById",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserDeleteUserByIdDelete(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/User/GetAllBooking
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserGetAllBookingGet",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/User/GetAllBooking",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserGetAllBookingGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/User/GetAllUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserGetAllUsersGet",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/User/GetAllUsers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserGetAllUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/User/GetUserByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserGetUserByUserIdGet",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/User/GetUserByUserId",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserGetUserByUserIdGet(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/User/Login
     *
     * @param userModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserLoginPost",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/User/Login",
        produces = { "application/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserLoginPost(
        @Parameter(name = "UserModel", description = "") @Valid @RequestBody(required = false) UserModel userModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/User/UpdateBooking
     *
     * @param tempBooking  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserUpdateBookingPut",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/User/UpdateBooking",
        produces = { "application/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserUpdateBookingPut(
        @Parameter(name = "TempBooking", description = "") @Valid @RequestBody(required = false) TempBooking tempBooking
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/User/UpdateUser
     *
     * @param youTubeUserBasicView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiUserUpdateUserPut",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/User/UpdateUser",
        produces = { "application/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiUserUpdateUserPut(
        @Parameter(name = "YouTubeUserBasicView", description = "") @Valid @RequestBody(required = false) YouTubeUserBasicView youTubeUserBasicView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Values
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiValuesGet",
        tags = { "Values" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = String.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class))),
                @Content(mediaType = "text/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Values",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<List<String>> apiValuesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/Values/{id}
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiValuesIdDelete",
        tags = { "Values" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/Values/{id}"
    )
    
    default ResponseEntity<Void> apiValuesIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Values/{id}
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiValuesIdGet",
        tags = { "Values" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Values/{id}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<String> apiValuesIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/Values/{id}
     *
     * @param id  (required)
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiValuesIdPut",
        tags = { "Values" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/Values/{id}",
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<Void> apiValuesIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Values
     *
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiValuesPost",
        tags = { "Values" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Values",
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<Void> apiValuesPost(
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Webinar/CreateNewRegistration
     *
     * @param webinarRegistrationProd  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiWebinarCreateNewRegistrationPost",
        tags = { "Webinar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Webinar/CreateNewRegistration",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiWebinarCreateNewRegistrationPost(
        @Parameter(name = "WebinarRegistrationProd", description = "") @Valid @RequestBody(required = false) WebinarRegistrationProd webinarRegistrationProd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/Webinar/CreateRegistration
     *
     * @param webinarRegistration  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiWebinarCreateRegistrationPost",
        tags = { "Webinar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/Webinar/CreateRegistration",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiWebinarCreateRegistrationPost(
        @Parameter(name = "WebinarRegistration", description = "") @Valid @RequestBody(required = false) WebinarRegistration webinarRegistration
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Webinar/GetAllRegistration
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiWebinarGetAllRegistrationGet",
        tags = { "Webinar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Webinar/GetAllRegistration",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiWebinarGetAllRegistrationGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/Webinar/GetNewRegistration
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiWebinarGetNewRegistrationGet",
        tags = { "Webinar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/Webinar/GetNewRegistration",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiWebinarGetNewRegistrationGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/youtube/AddCity
     *
     * @param cityMasterData  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeAddCityPost",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/youtube/AddCity",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeAddCityPost(
        @Parameter(name = "CityMasterData", description = "") @Valid @RequestBody(required = false) CityMasterData cityMasterData
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/youtube/AddCountry
     *
     * @param countryMaster  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeAddCountryPost",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/youtube/AddCountry",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeAddCountryPost(
        @Parameter(name = "CountryMaster", description = "") @Valid @RequestBody(required = false) CountryMaster countryMaster
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/youtube/AddDistrict
     *
     * @param districtMasterData  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeAddDistrictPost",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/youtube/AddDistrict",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeAddDistrictPost(
        @Parameter(name = "DistrictMasterData", description = "") @Valid @RequestBody(required = false) DistrictMasterData districtMasterData
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/youtube/AddNewTicket
     *
     * @param youtubeTicket  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeAddNewTicketPost",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/youtube/AddNewTicket",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeAddNewTicketPost(
        @Parameter(name = "YoutubeTicket", description = "") @Valid @RequestBody(required = false) YoutubeTicket youtubeTicket
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/youtube/AddState
     *
     * @param stateMasterDATA  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeAddStatePost",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/youtube/AddState",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeAddStatePost(
        @Parameter(name = "StateMasterDATA", description = "") @Valid @RequestBody(required = false) StateMasterDATA stateMasterDATA
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/youtube/DeleteTicketByTicketId
     *
     * @param ticketId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeDeleteTicketByTicketIdDelete",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/youtube/DeleteTicketByTicketId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeDeleteTicketByTicketIdDelete(
        @Parameter(name = "ticketId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ticketId", required = false) Integer ticketId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetAllCitiesByDistrictId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetAllCitiesByDistrictIdGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetAllCitiesByDistrictId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetAllCitiesByDistrictIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetAllCities
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetAllCitiesGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetAllCities",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetAllCitiesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetAllCountry
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetAllCountryGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetAllCountry",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetAllCountryGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetAllDistrictByStateId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetAllDistrictByStateIdGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetAllDistrictByStateId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetAllDistrictByStateIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetAllDistrict
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetAllDistrictGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetAllDistrict",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetAllDistrictGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetAllStateByCountryId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetAllStateByCountryIdGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetAllStateByCountryId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetAllStateByCountryIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetAllState
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetAllStateGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetAllState",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetAllStateGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetAllTickets
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetAllTicketsGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetAllTickets",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetAllTicketsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetTicketByTicketId
     *
     * @param ticketId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetTicketByTicketIdGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetTicketByTicketId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetTicketByTicketIdGet(
        @Parameter(name = "ticketId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ticketId", required = false) Integer ticketId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetTicketsDashboard
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetTicketsDashboardGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetTicketsDashboard",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetTicketsDashboardGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/youtube/GetTodaysTickets
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeGetTodaysTicketsGet",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/youtube/GetTodaysTickets",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeGetTodaysTicketsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/youtube/UpdateTicket
     *
     * @param youtubeTicket  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiYoutubeUpdateTicketPut",
        tags = { "youtube" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/youtube/UpdateTicket",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiYoutubeUpdateTicketPut(
        @Parameter(name = "YoutubeTicket", description = "") @Valid @RequestBody(required = false) YoutubeTicket youtubeTicket
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/zomato/AddBulkFoodCategory
     *
     * @param zomatoFoodCategory  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoAddBulkFoodCategoryPost",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/zomato/AddBulkFoodCategory",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoAddBulkFoodCategoryPost(
        @Parameter(name = "ZomatoFoodCategory", description = "") @Valid @RequestBody(required = false) List<@Valid ZomatoFoodCategory> zomatoFoodCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/zomato/AddBulkMenuItems
     *
     * @param zomatoMenuItem  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoAddBulkMenuItemsPost",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/zomato/AddBulkMenuItems",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoAddBulkMenuItemsPost(
        @Parameter(name = "ZomatoMenuItem", description = "") @Valid @RequestBody(required = false) List<@Valid ZomatoMenuItem> zomatoMenuItem
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/zomato/AddNewOrder
     *
     * @param zomatoOrderViewModel  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoAddNewOrderPost",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/zomato/AddNewOrder",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoAddNewOrderPost(
        @Parameter(name = "ZomatoOrderViewModel", description = "") @Valid @RequestBody(required = false) ZomatoOrderViewModel zomatoOrderViewModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/zomato/AddNewRestaurant
     *
     * @param zomatoRestaurant  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoAddNewRestaurantPost",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/zomato/AddNewRestaurant",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoAddNewRestaurantPost(
        @Parameter(name = "ZomatoRestaurant", description = "") @Valid @RequestBody(required = false) ZomatoRestaurant zomatoRestaurant
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/zomato/AddNewUser
     *
     * @param zomatoUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoAddNewUserPost",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/zomato/AddNewUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoAddNewUserPost(
        @Parameter(name = "ZomatoUser", description = "") @Valid @RequestBody(required = false) ZomatoUser zomatoUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/zomato/AddToCart
     *
     * @param zomatoCartView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoAddToCartPost",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/zomato/AddToCart",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoAddToCartPost(
        @Parameter(name = "ZomatoCartView", description = "") @Valid @RequestBody(required = false) ZomatoCartView zomatoCartView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/zomato/CancelOrderByOrderId
     *
     * @param orderId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoCancelOrderByOrderIdDelete",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/zomato/CancelOrderByOrderId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoCancelOrderByOrderIdDelete(
        @Parameter(name = "orderId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderId", required = false) Integer orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/zomato/DeleteFoodCategoryById
     *
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoDeleteFoodCategoryByIdDelete",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/zomato/DeleteFoodCategoryById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoDeleteFoodCategoryByIdDelete(
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/zomato/DeleteMenuByRestaurantId
     *
     * @param itemId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoDeleteMenuByRestaurantIdDelete",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/zomato/DeleteMenuByRestaurantId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoDeleteMenuByRestaurantIdDelete(
        @Parameter(name = "itemId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "itemId", required = false) Integer itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/zomato/DeleteRestaurantByRestaurantId
     *
     * @param restaurantId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoDeleteRestaurantByRestaurantIdDelete",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/zomato/DeleteRestaurantByRestaurantId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoDeleteRestaurantByRestaurantIdDelete(
        @Parameter(name = "restaurantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "restaurantId", required = false) Integer restaurantId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/zomato/DeleteUserByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoDeleteUserByUserIdDelete",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/zomato/DeleteUserByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoDeleteUserByUserIdDelete(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetAllFoodCategory
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetAllFoodCategoryGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetAllFoodCategory",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetAllFoodCategoryGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetAllMenuByRestaurantId
     *
     * @param restaurantId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetAllMenuByRestaurantIdGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetAllMenuByRestaurantId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetAllMenuByRestaurantIdGet(
        @Parameter(name = "restaurantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "restaurantId", required = false) Integer restaurantId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetAllMenu
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetAllMenuGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetAllMenu",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetAllMenuGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetAllOrdersByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetAllOrdersByUserIdGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetAllOrdersByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetAllOrdersByUserIdGet(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetAllOrdersByrestaurantId
     *
     * @param restaurantId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetAllOrdersByrestaurantIdGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetAllOrdersByrestaurantId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetAllOrdersByrestaurantIdGet(
        @Parameter(name = "restaurantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "restaurantId", required = false) Integer restaurantId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetAllOrders
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetAllOrdersGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetAllOrders",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetAllOrdersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetAllRestaurant
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetAllRestaurantGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetAllRestaurant",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetAllRestaurantGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetAllUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetAllUsersGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetAllUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetAllUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetCartItemsByCustomerIdForRestaurant
     *
     * @param customerId  (optional)
     * @param restaurantId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetCartItemsByCustomerIdForRestaurantGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetCartItemsByCustomerIdForRestaurant",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetCartItemsByCustomerIdForRestaurantGet(
        @Parameter(name = "customerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "customerId", required = false) Integer customerId,
        @Parameter(name = "restaurantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "restaurantId", required = false) Integer restaurantId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetFoodItemByCategory
     *
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetFoodItemByCategoryGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetFoodItemByCategory",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetFoodItemByCategoryGet(
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetFoodItemOfRestaurantByCategory
     *
     * @param restaurantId  (optional)
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetFoodItemOfRestaurantByCategoryGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetFoodItemOfRestaurantByCategory",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetFoodItemOfRestaurantByCategoryGet(
        @Parameter(name = "restaurantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "restaurantId", required = false) Integer restaurantId,
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetOrderByOrderId
     *
     * @param orderId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetOrderByOrderIdGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetOrderByOrderId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetOrderByOrderIdGet(
        @Parameter(name = "orderId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderId", required = false) Integer orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetRestaurantByRestaurantId
     *
     * @param restaurantID  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetRestaurantByRestaurantIdGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetRestaurantByRestaurantId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetRestaurantByRestaurantIdGet(
        @Parameter(name = "restaurantID", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "restaurantID", required = false) Integer restaurantID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetRestaurantServingByCategoryId
     *
     * @param categoryId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetRestaurantServingByCategoryIdGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetRestaurantServingByCategoryId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetRestaurantServingByCategoryIdGet(
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/zomato/GetUserByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoGetUserByUserIdGet",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/zomato/GetUserByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoGetUserByUserIdGet(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/zomato/Login
     *
     * @param loginZomato  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoLoginPost",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/zomato/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoLoginPost(
        @Parameter(name = "LoginZomato", description = "") @Valid @RequestBody(required = false) LoginZomato loginZomato
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/zomato/RemoveItemFromCart
     *
     * @param cartId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoRemoveItemFromCartDelete",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/zomato/RemoveItemFromCart",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoRemoveItemFromCartDelete(
        @Parameter(name = "cartId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cartId", required = false) Integer cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/zomato/UpdateCartQuantity
     *
     * @param zomatoCartView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoUpdateCartQuantityPost",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/zomato/UpdateCartQuantity",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoUpdateCartQuantityPost(
        @Parameter(name = "ZomatoCartView", description = "") @Valid @RequestBody(required = false) ZomatoCartView zomatoCartView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/zomato/UpdateRestaurant
     *
     * @param zomatoRestaurant  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoUpdateRestaurantPut",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/zomato/UpdateRestaurant",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoUpdateRestaurantPut(
        @Parameter(name = "ZomatoRestaurant", description = "") @Valid @RequestBody(required = false) ZomatoRestaurant zomatoRestaurant
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/zomato/UpdateUser
     *
     * @param zomatoUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZomatoUpdateUserPut",
        tags = { "zomato" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/zomato/UpdateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZomatoUpdateUserPut(
        @Parameter(name = "ZomatoUser", description = "") @Valid @RequestBody(required = false) ZomatoUser zomatoUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ZoomCar/AddBulkLocations
     *
     * @param zoomLocation  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarAddBulkLocationsPost",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ZoomCar/AddBulkLocations",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarAddBulkLocationsPost(
        @Parameter(name = "ZoomLocation", description = "") @Valid @RequestBody(required = false) List<@Valid ZoomLocation> zoomLocation
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ZoomCar/addNewCar
     *
     * @param zoomCarView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarAddNewCarPost",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ZoomCar/addNewCar",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarAddNewCarPost(
        @Parameter(name = "ZoomCarView", description = "") @Valid @RequestBody(required = false) ZoomCarView zoomCarView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ZoomCar/AddNewUser
     *
     * @param zoomUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarAddNewUserPost",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ZoomCar/AddNewUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarAddNewUserPost(
        @Parameter(name = "ZoomUser", description = "") @Valid @RequestBody(required = false) ZoomUser zoomUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ZoomCar/AddReview
     *
     * @param zoomCarReview  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarAddReviewPost",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ZoomCar/AddReview",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarAddReviewPost(
        @Parameter(name = "ZoomCarReview", description = "") @Valid @RequestBody(required = false) ZoomCarReview zoomCarReview
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ZoomCar/createNewBooking
     *
     * @param zoomBooking  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarCreateNewBookingPost",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ZoomCar/createNewBooking",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarCreateNewBookingPost(
        @Parameter(name = "ZoomBooking", description = "") @Valid @RequestBody(required = false) ZoomBooking zoomBooking
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/DeleteBookingById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarDeleteBookingByIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/DeleteBookingById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarDeleteBookingByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/DeleteCarById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarDeleteCarByIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/DeleteCarById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarDeleteCarByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/DeleteLocationById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarDeleteLocationByIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/DeleteLocationById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarDeleteLocationByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/ZoomCar/DeleteUserByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarDeleteUserByUserIdDelete",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/ZoomCar/DeleteUserByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarDeleteUserByUserIdDelete(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllBookingsByCarId
     *
     * @param carid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllBookingsByCarIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllBookingsByCarId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllBookingsByCarIdGet(
        @Parameter(name = "carid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "carid", required = false) Integer carid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllBookingsByCustomerId
     *
     * @param customerid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllBookingsByCustomerIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllBookingsByCustomerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllBookingsByCustomerIdGet(
        @Parameter(name = "customerid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "customerid", required = false) Integer customerid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllBookings
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllBookingsGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllBookings",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllBookingsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllCarsByLocation
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllCarsByLocationGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllCarsByLocation",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllCarsByLocationGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllCarsByOwnerId
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllCarsByOwnerIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllCarsByOwnerId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllCarsByOwnerIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllCars
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllCarsGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllCars",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllCarsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllLocations
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllLocationsGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllLocations",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllLocationsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllReviewByCarId
     *
     * @param carid  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllReviewByCarIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllReviewByCarId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllReviewByCarIdGet(
        @Parameter(name = "carid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "carid", required = false) Integer carid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetAllUsers
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetAllUsersGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetAllUsers",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetAllUsersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetBookingById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetBookingByIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetBookingById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetBookingByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetCarById
     *
     * @param id  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetCarByIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetCarById",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetCarByIdGet(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/GetUserByUserId
     *
     * @param userId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarGetUserByUserIdGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/GetUserByUserId",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarGetUserByUserIdGet(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/ZoomCar/Login
     *
     * @param zoomUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarLoginPost",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ZoomCar/Login",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarLoginPost(
        @Parameter(name = "ZoomUser", description = "") @Valid @RequestBody(required = false) ZoomUser zoomUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/ZoomCar/searchCarByLocation
     *
     * @param query  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarSearchCarByLocationGet",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ZoomCar/searchCarByLocation",
        produces = { "text/plain", "application/json", "text/json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarSearchCarByLocationGet(
        @Parameter(name = "query", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/ZoomCar/updateBooking
     *
     * @param zoomBooking  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarUpdateBookingPut",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/ZoomCar/updateBooking",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarUpdateBookingPut(
        @Parameter(name = "ZoomBooking", description = "") @Valid @RequestBody(required = false) ZoomBooking zoomBooking
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/ZoomCar/UpdateCar
     *
     * @param zoomCarView  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarUpdateCarPut",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/ZoomCar/UpdateCar",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarUpdateCarPut(
        @Parameter(name = "ZoomCarView", description = "") @Valid @RequestBody(required = false) ZoomCarView zoomCarView
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/ZoomCar/UpdateUser
     *
     * @param zoomUser  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiZoomCarUpdateUserPut",
        tags = { "ZoomCar" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/ZoomCar/UpdateUser",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/*+json" }
    )
    
    default ResponseEntity<ModelApiResponse> apiZoomCarUpdateUserPut(
        @Parameter(name = "ZoomUser", description = "") @Valid @RequestBody(required = false) ZoomUser zoomUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Message\" : \"Message\", \"Data\" : \"\", \"Result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
